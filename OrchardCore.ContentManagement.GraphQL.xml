<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchardCore.ContentManagement.GraphQL</name>
    </assembly>
    <members>
        <member name="M:OrchardCore.ContentManagement.GraphQL.GraphQLTypeExtensions.HasFieldIgnoreCase(GraphQL.Types.IComplexGraphType,System.String)">
            <summary>
            Checks if the field exists in the GraphQL type in a case-insensitive way.
            </summary>
            <remarks>
            <para>
            This is the same as calling <see cref="M:GraphQL.Types.IComplexGraphType.HasField(System.String)"/> but in a case-insensitive way. OC
            fields may be added with different casings, and we want to avoid collisions even then.
            </para>
            <para>
            See <see href="https://github.com/OrchardCMS/OrchardCore/pull/16151"/> and its corresponding issues for context.
            </para>
            </remarks>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Options.GraphQLContentOptions.DiscoverableSterotypes">
            <summary>
            By default, only content types without stereotypes are included.
            This option enables you to explicitly add additional stereotypes for discovery.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Options.GraphQLContentOptions.ShouldCollapse(OrchardCore.ContentManagement.Metadata.Models.ContentTypePartDefinition)">
             <summary>
             Collapsing works at a hierarchy
            
             If the Content Type is marked at collapsed, then all parts are collapsed.
             If the Content Type is not marked collapsed, then it falls down to the content type under it.
             If the Content Part at a top level is marked collapsed, then it will trump above.
             </summary>
             <param name="definition"></param>
             <returns></returns>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.ContentItemsFieldType">
            <summary>
            This type is used by <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.ContentTypeQuery"/> to represent a query on a content type.
            </summary>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.ContentTypeQuery">
            <summary>
            Registers all Content Types as queries.
            </summary>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.AndExpression">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression" /> that combines two <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s
            with an <c>and</c> between them.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.AndExpression.#ctor(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate,OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.AndExpression" /> class
            that combines two <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.
            </summary>
            <param name="left">The left hand side <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.</param>
            <param name="right">The right hand side <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.</param>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.AndExpression.Operator">
            <inheritdoc />
            <value>Returns "<c>and</c>".</value>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Conjunction">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that combines together multiple <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s with an <c>and</c>.
            </summary>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Conjunction.Operation">
            <inheritdoc />
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Conjunction.EmptyExpression">
            <inheritdoc />
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Disjunction">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that combines together multiple <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s with an <c>or</c>.
            </summary>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Disjunction.Operation">
            <inheritdoc />
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Disjunction.EmptyExpression">
            <inheritdoc />
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression">
            <summary>
            Represents the built-in <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> expressions used for building SQL expressions.
            </summary>
            <seealso cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.#ctor">
            <summary>Constructs a new instance of <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression"></see>.</summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.Equal(System.String,System.Object)">
            <summary>
            Apply an "equal" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.Like(System.String,System.String,OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions)">
            <summary>
            Apply a "like" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
            <param name="matchOptions">The match options for the like expression.</param>
            <returns>A <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LikeExpression" />.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.GreaterThan(System.String,System.Object)">
            <summary>
            Apply a "greater than" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.GreaterThanOrEqual(System.String,System.Object)">
            <summary>
            Apply a "greater than or equal" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.LessThan(System.String,System.Object)">
            <summary>
            Apply a "less than" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.LessThanOrEqual(System.String,System.Object)">
            <summary>
            Apply a "less than or equal" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.In(System.String,System.Object[])">
            <summary>
            Apply an "in" constraint to the named property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="values">An array of values.</param>
            <returns>An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.InExpression" />.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.And(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate,OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Return the conjunction of two expressions.
            </summary>
            <param name="left">The left hand side expression.</param>
            <param name="right">The right hand side expression.</param>
            <returns>An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.AndExpression" />.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.Or(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate,OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Return the disjunction of two expressions.
            </summary>
            <param name="left">The left hand side expression.</param>
            <param name="right">The right hand side expression.</param>
            <returns>An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.OrExpression" />.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.Not(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Return the negation of an expression.
            </summary>
            <param name="expression">The expression to negate.</param>
            <returns>A <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.NotExpression" />.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.Conjunction">
            <summary>
            Group expressions together in a single conjunction (A and B and C...)
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression.Disjunction">
            <summary>
            Group expressions together in a single disjunction (A or B or C...)
            </summary>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.InExpression">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that constrains the property to a specified list of values.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate.ToSqlString(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery)">
            <summary>
            Render a sql string for the expression.
            </summary>
            <returns>A string that contains a valid Sql fragment.</returns>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery">
            <summary>
            Represents a predicate query instance that can build SQL to execute against a database.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery.NewQueryParameter(System.Object)">
            <summary>
            Adds a new query parameter to the current query.
            </summary>
            <param name="value">The value of the query parameter.</param>
            <returns>The name of the new query parameter.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery.CreateAlias(System.String,System.String)">
            <summary>
            Creates an alias for a specified path.
            </summary>
            <param name="path">The path of the property.</param>
            <param name="alias">The alias name.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery.CreateTableAlias(System.String,System.String)">
            <summary>
            Creates an actual sql table alias for a specified path.
            </summary>
            <param name="path">The path of the property.</param>
            <param name="tableAlias">The sql table alias name.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery.SearchUsedAlias(System.String)">
            <summary>
            search used alias for the given property path.
            </summary>
            <param name="propertyPath">The path of the property.</param>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery.GetColumnName(System.String)">
            <summary>
            Gets the formatted column name for the given property path.
            </summary>
            <param name="propertyPath">The path of the property.</param>
            <returns>The SQL formatted name of the column.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery.GetUsedAliases">
            <summary>
            Gets all the aliases that were used in the current query.
            </summary>
            <returns>The collection of alias names.</returns>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Junction">
            <summary>
            A sequence of logical <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s combined by some associative
            logical operator.
            </summary>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Junction.Operation">
            <summary>
            Get the Sql operator to put between multiple <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s.
            </summary>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Junction.EmptyExpression">
            <summary>
            The <see cref="T:System.String" /> corresponding to an instance with no added sub-criteria.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Junction.Add(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Adds an <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> to the list of <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s
            to junction together.
            </summary>
            <param name="predicate">The <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> to add.</param>
            <returns>
            This <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Junction" /> instance.
            </returns>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LikeExpression">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that represents a "like" constraint.
            </summary>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that combines two <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s
            with a operator (either "<c>and</c>" or "<c>or</c>") between them.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression.#ctor(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate,OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Initialize a new instance of the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression" /> class that
            combines two other <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s.
            </summary>
            <param name="left">The left hand side <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.</param>
            <param name="right">The right hand side <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.</param>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression.Left">
            <summary>
            Gets the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that will be on the Left Hand Side of the Op.
            </summary>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression.Right">
            <summary>
            Gets the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that will be on the Right Hand Side of the Op.
            </summary>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.LogicalExpression.Operator">
            <summary>
            Get the Sql operator to put between the two <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.Expression" />s.
            </summary>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions">
            <summary>
            Represents a strategy for matching strings using the "like" operand.
            </summary>
        </member>
        <member name="F:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.StartsWith">
            <summary>
            Match the start of the string to the pattern.
            </summary>
        </member>
        <member name="F:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.EndsWith">
            <summary>
            Match the end of the string to the pattern.
            </summary>
        </member>
        <member name="F:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.Contains">
            <summary>
            Match when the string contains the pattern.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.ToMatchString(System.String)">
            <summary>
            Convert the pattern, by appending/prepending "%".
            </summary>
            <param name="pattern">The string to convert to the appropriate match pattern.</param>
            <returns>
            A <see cref="T:System.String" /> that contains a "%" in the appropriate place
            for the Match Strategy.
            </returns>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.StartsWithMatchOptions">
            <summary>
            The <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions" /> that matches if the string starts with the pattern.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.StartsWithMatchOptions.ToMatchString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.EndsWithMatchOptions">
            <summary>
            The <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions" /> that matches if the string ends with the pattern.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.EndsWithMatchOptions.ToMatchString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.ContainsMatchOptions">
            <summary>
            The <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions" /> that matches if the string contains the pattern.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.MatchOptions.ContainsMatchOptions.ToMatchString(System.String)">
            <inheritdoc />
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.NotExpression">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that negates another <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.NotExpression.#ctor(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Initialize a new instance of the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.NotExpression" /> class for an <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.
            </summary>
            <param name="predicate">The <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> to negate.</param>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.OrExpression">
            <summary>
            An <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that combines two <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s with an
            <c>"or"</c> between them.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.OrExpression.#ctor(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate,OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate)">
            <summary>
            Initialize a new instance of the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.OrExpression" /> class for
            two <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />s.
            </summary>
            <param name="left">The left hand side <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.</param>
            <param name="right">The right hand side <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" />.</param>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.OrExpression.Operator">
            <inheritdoc />
            <value>Returns "<c>or</c>".</value>
        </member>
        <member name="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.SimpleExpression">
            <summary>
            The base class for an <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicate" /> that compares a single property
            to a value.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.SimpleExpression.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.SimpleExpression" /> class for a named
            property and its value.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="value">The value for the property.</param>
            <param name="operation">The SQL operation.</param>
        </member>
        <member name="P:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.SimpleExpression.Operation">
            <summary>
            Get the Sql operator to use for the specific
            subclass of <see cref="T:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.SimpleExpression" />.
            </summary>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.Queries.Predicates.SimpleExpression.ToSqlString(OrchardCore.ContentManagement.GraphQL.Queries.Predicates.IPredicateQuery)">
            <summary>
            Converts the SimpleExpression to a SQL <see cref="T:System.String" />.
            </summary>
            <returns>A string that contains a valid Sql fragment.</returns>
        </member>
        <member name="M:OrchardCore.ContentManagement.GraphQL.ServiceCollectionExtensions.AddGraphQLFilterType``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers a type providing custom filters for content item filters.
            </summary>
            <typeparam name="TObjectTypeToFilter"></typeparam>
            <typeparam name="TFilterType"></typeparam>
            <param name="services"></param>
        </member>
    </members>
</doc>
