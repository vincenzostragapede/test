<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchardCore.Abstractions</name>
    </assembly>
    <members>
        <member name="M:OrchardCore.BackgroundJobs.HttpBackgroundJob.ExecuteAfterEndOfRequestAsync(System.String,System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            Executes a background job in an isolated <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> after the current HTTP request is completed.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.Title">
            <summary>
            The display name of this background task.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.Enable">
            <summary>
            Whether this background task is enabled or not.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.Schedule">
            <summary>
            The background task schedule as a cron expression.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.Description">
            <summary>
            The description of this background task.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.LockTimeout">
            <summary>
            The timeout in milliseconds to acquire a lock before executing the task atomically.
            There is no locking if equal to zero or if there is no registered distributed lock.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.LockExpiration">
            <summary>
            The expiration in milliseconds of the lock acquired before executing the task atomically.
            There is no locking if equal to zero or if there is no registered distributed lock.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskAttribute.UsePipeline">
            <summary>
            Whether or not the pipeline should be built to configure endpoints
            and then executed to allow route urls generation in the background.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.Name">
            <summary>
            The name of this background task.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.Title">
            <summary>
            The display name of this background task.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.Enable">
            <summary>
            Whether this background task is enabled or not.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.Schedule">
            <summary>
            The background task schedule as a cron expression.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.Description">
            <summary>
            The description of this background task.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.LockTimeout">
            <summary>
            The timeout in milliseconds to acquire a lock before executing the task atomically.
            There is no locking if equal to zero or if there is no registered distributed lock.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.LockExpiration">
            <summary>
            The expiration in milliseconds of the lock acquired before executing the task atomically.
            There is no locking if equal to zero or if there is no registered distributed lock.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.UsePipeline">
            <summary>
            Whether or not the pipeline should be built to configure endpoints
            and then executed to allow route urls generation in the background.
            </summary>
        </member>
        <member name="P:OrchardCore.BackgroundTasks.BackgroundTaskSettings.IsAtomic">
            <summary>
            Whether this background task is atomic or not, it is atomic if both
            the lock timeout and the lock expiration time are greater than zero.
            </summary>
        </member>
        <member name="M:OrchardCore.BackgroundTasks.DistributedLockExtensions.TryAcquireBackgroundTaskLockAsync(OrchardCore.Locking.Distributed.IDistributedLock,OrchardCore.BackgroundTasks.BackgroundTaskSettings)">
            <summary>
            Tries to acquire a lock on the background task if it is atomic and if the lock service is not a local lock, otherwise returns true with a null locker.
            </summary>
        </member>
        <member name="T:OrchardCore.BackgroundTasks.IBackgroundTaskEventHandler">
            <summary>
            Provides methods that get called around the execution of any <see cref="T:OrchardCore.BackgroundTasks.IBackgroundTask"/>.
            Implement this interface to hook into background task execution.
            </summary>
        </member>
        <member name="M:OrchardCore.BackgroundTasks.IBackgroundTaskEventHandler.ExecutingAsync(OrchardCore.BackgroundTasks.BackgroundTaskEventContext,System.Threading.CancellationToken)">
            <summary>
            This method get called just before the execution of any <see cref="T:OrchardCore.BackgroundTasks.IBackgroundTask"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.BackgroundTasks.IBackgroundTaskEventHandler.ExecutedAsync(OrchardCore.BackgroundTasks.BackgroundTaskEventContext,System.Threading.CancellationToken)">
            <summary>
            This method get called just after the execution of any <see cref="T:OrchardCore.BackgroundTasks.IBackgroundTask"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Cache.SignalExtensions.DeferredSignalToken(OrchardCore.Environment.Cache.ISignal,System.String)">
            <summary>
            Adds a Signal (if not already present) to be sent at the end of the shell scope.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Extensions.FeatureTypeDiscoveryAttribute">
            <summary>
            Configures how the <see cref="T:OrchardCore.Environment.Extensions.ITypeFeatureProvider" /> will assign the type to features.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.FeatureTypeDiscoveryAttribute.SkipExtension">
            <summary>
            Prevents assignment of a public type to the main feature.
            </summary>
            <remarks>
            If <c>SkipExtension</c> is set to true, the type is only added to the same feature
            as its startup class. 
            </remarks>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.FeatureTypeDiscoveryAttribute.SingleFeatureOnly">
            <summary>
            Ensures a type is only registered with a single feature.
            </summary>
            <remarks>
            If <c>SingleFeatureOnly</c> is set to true, the <c>TypeFeatureProvider</c> will throw
            an <c>InvalidOperationException</c> if the type gets assigned to more than one feature.
            </remarks>
        </member>
        <member name="T:OrchardCore.Environment.Extensions.Features.IFeatureHash">
            <summary>
            An implementation of this interface provide efficient access to the state
            of the enabled feature in order to provide hashes used for caching.
            Because its state should be cached, the instance should not have any state
            thus is declared as transient.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.Features.IFeatureHash.GetFeatureHashAsync">
            <summary>
            Returns a serial number representing the list of available features for the current tenant.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> value that changes every time the list of features changes.
            The implementation is efficient in order to be called frequently.
            </returns>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.Features.IFeatureHash.GetFeatureHashAsync(System.String)">
            <summary>
            Returns a serial number representing the list of available features for the current tenant.
            </summary>
            <returns>
            A <see cref="T:System.Int32"/> value that changes every time a specific feature is enabled.
            The implementation is efficient in order to be called frequently.
            </returns>
        </member>
        <member name="T:OrchardCore.Environment.Extensions.Features.IFeaturesProvider">
            <summary>
            Provides opportunities to work with the Module Feature set.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.Features.IFeaturesProvider.GetFeatures(OrchardCore.Environment.Extensions.IExtensionInfo,OrchardCore.Environment.Extensions.IManifestInfo)">
            <summary>
            Returns the Features corresponding with the Extension, Manifest, etc.
            </summary>
            <param name="extensionInfo"></param>
            <param name="manifestInfo"></param>
            <returns></returns>
        </member>
        <member name="T:OrchardCore.Environment.Extensions.ITypeFeatureProvider">
            <summary>
            An implementation of this service is able to provide the <see cref="T:OrchardCore.Environment.Extensions.Features.IFeatureInfo"/> that
            any services was harvested from.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.ITypeFeatureProvider.GetExtensionForDependency(System.Type)">
            <summary>
            Gets the extension for the specified dependent type.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.ITypeFeatureProvider.GetFeatureForDependency(System.Type)">
            <summary>
            Gets the first feature for the specified dependent type.
            </summary>
            <remarks>
            If a type has been registered for more than one feature,
            <see cref="M:OrchardCore.Environment.Extensions.ITypeFeatureProvider.GetFeatureForDependency(System.Type)"/> returns the first feature that has
            the same ID as the parent extension.
            Use this method when you only need one feature of a module, such
            as when applying migrations for the entire module as opposed to
            functionality of individual features.
            </remarks>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.ITypeFeatureProvider.GetFeaturesForDependency(System.Type)">
            <summary>
            Gets all features for the specified dependent type.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.ITypeFeatureProvider.GetTypesForFeature(OrchardCore.Environment.Extensions.Features.IFeatureInfo)">
            <summary>
            Gets all dependent types for the specified feature.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.ITypeFeatureProvider.TryAdd(System.Type,OrchardCore.Environment.Extensions.Features.IFeatureInfo)">
            <summary>
            Adds a type to the specified feature.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.IExtensionInfo.Id">
            <summary>
            The id of the extension.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.IExtensionInfo.SubPath">
            <summary>
            The path to the extension.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.IExtensionInfo.Manifest">
            <summary>
            The manifest info of the extension.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.IExtensionInfo.Features">
            <summary>
            List of features in extension.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Extensions.IExtensionInfo.Exists">
            <summary>
            Whether this extension info exists.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Extensions.Utility.DependencyOrdering.OrderByDependenciesAndPriorities``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Linearizes a dependency graph so that items are positioned after their dependencies.
            This by using a function which determines if an item has a direct dependency on another.
            Then, items are moved up whenever it is possible without breaking the dependency graph.
            This by using a function which gives for each item a priority used as an order value.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ServiceProviderExtensions.CreateInstance``1(System.IServiceProvider)">
            <summary>
            Instantiates a new object of the specified type, but with support for constructor injection.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ServiceProviderExtensions.CreateInstance``1(System.IServiceProvider,System.Type)">
            <summary>
            Instantiates a new object of the specified type, but with support for constructor injection.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ServiceProviderExtensions.GetKeyedService(System.IServiceProvider,System.Type,System.Object)">
            <summary>
            Gets the service object of the specified type with the specified key.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Builders.ICompositionStrategy">
            <summary>
            Service at the host level to transform the cacheable descriptor into the loadable blueprint.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ICompositionStrategy.ComposeAsync(OrchardCore.Environment.Shell.ShellSettings,OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor)">
            <summary>
            Using information from the IExtensionManager, transforms and populates all of the
            blueprint model the shell builders will need to correctly initialize a tenant IoC container.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Builders.IShellContextFactory">
            <summary>
            High-level coordinator that exercises other component capabilities to
            build all of the artifacts for a running shell given a tenant settings.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.IShellContextFactory.CreateShellContextAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Builds a shell context given a specific tenant settings structure.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.IShellContextFactory.CreateSetupContextAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Builds a shell context for an uninitialized Orchard instance. Needed
            to display setup user interface.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.IShellContextFactory.CreateDescribedContextAsync(OrchardCore.Environment.Shell.ShellSettings,OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor)">
            <summary>
            Builds a shell context given a specific description of features and parameters.
            Shell's actual current descriptor has no effect. Does not use or update descriptor cache.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.IShellPipeline.Invoke(System.Object)">
            <summary>
            Executes this shell pipeline.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Builders.Models.ShellBlueprint">
            <summary>
            Contains the information necessary to initialize an IoC container
            for a particular tenant. This model is created by the ICompositionStrategy
            and is passed into the IShellContainerFactory.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContainerOptions.Initializers">
            <summary>
            Delegates to be invoked asynchronously after a tenant container is created.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Builders.ShellContext">
            <summary>
            Represents the state of a tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContext.#ctor">
            <summary>
            Initializes a new <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/>.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.UtcTicks">
            <summary>
            The creation date and time of this shell context in ticks.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.Settings">
            <summary>
            The <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/> holding the tenant settings and configuration.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.Blueprint">
            <summary>
            The <see cref="T:OrchardCore.Environment.Shell.Builders.Models.ShellBlueprint"/> describing the tenant container.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.ServiceProvider">
            <summary>
            The <see cref="T:System.IServiceProvider"/> of the tenant container.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.IsActivated">
            <summary>
            Whether the shell is activated or not.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.Pipeline">
            <summary>
            The Pipeline built for this shell.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Builders.ShellContext.PlaceHolder">
            <summary>
            PlaceHolder class used for shell lazy initialization.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContext.PlaceHolder.#ctor">
            <summary>
            Initializes a placeHolder used for shell lazy initialization.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.PlaceHolder.PreCreated">
            <summary>
            Whether or not the tenant has been pre-created on first loading.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContext.CreateScopeAsync">
            <summary>
            Creates a <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> on this shell context.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.Released">
            <summary>
            Whether the <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/> instance is not yet built or has been released,
            for instance when a tenant has changed.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.ActiveScopes">
            <summary>
            Returns the number of active scopes on this tenant.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContext.SharedSettings">
            <summary>
            Whether or not this instance uses shared <see cref="P:OrchardCore.Environment.Shell.Builders.ShellContext.Settings"/> that should not be disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContext.ReleaseAsync">
            <summary>
            Marks the <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/> as released and then a candidate to be disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContext.AddDependentShellAsync(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Registers the specified shellContext as dependent such that it is also released when the current shell context is released.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContextExtensions.TryAcquireShellActivateLockAsync(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Tries to acquire a lock for shell activation, a local lock if it is initializing, otherwise a distributed lock.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Builders.ShellContextExtensions.TryAcquireShellRemovingLockAsync(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Tries to acquire a lock for shell removing.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContextOptions.ShellActivateLockTimeout">
            <summary>
            The timeout in milliseconds to acquire a distributed lock before activating a given shell.
            Note: Only used if the current distributed lock implementation is not a local lock.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContextOptions.ShellActivateLockExpiration">
            <summary>
            The expiration in milliseconds of the distributed lock acquired before activating a shell.
            Note: Only used if the current distributed lock implementation is not a local lock.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContextOptions.ShellRemovingLockTimeout">
            <summary>
            The timeout in milliseconds to acquire a distributed lock before removing a given shell.
            A low value is recommended because only one instance is intended to drop a given tenant.
            This also prevents other instances from waiting too long in their tenant syncing loop.
            Note: Only used if the current distributed lock implementation is not a local lock.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Builders.ShellContextOptions.ShellRemovingLockExpiration">
            <summary>
            The expiration in milliseconds of the distributed lock acquired before removing a shell.
            Note: Only used if the current distributed lock implementation is not a local lock.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Configuration.ConfigurationSectionExtensions.GetSectionCompat(Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            A helper method that gets a configuration section using the new format (using single underscore) while being backward compatible with the dot-notation.
            Not to be used by new code - new code should always use a single underscore when naming configuration keys that require separating segments.
            Examples:
            Good: "OrchardCore_Media_Azure".
            Bad: "OrchardCore.Media.Azure".
            See https://github.com/OrchardCMS/OrchardCore/issues/3766.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Configuration.ShellConfiguration">
            <summary>
            Holds the tenant <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/> which is lazily built
            from the application configuration 'appsettings.json', the 'App_Data/appsettings.json'
            file and then the 'App_Data/Sites/{tenant}/appsettings.json' file.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Configuration.ShellConfiguration.Configuration">
            <summary>
            The tenant configuration lazily built <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Descriptor.IShellDescriptorManager">
            <summary>
            Service resolved out of the shell container. Primarily used by host.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Descriptor.IShellDescriptorManager.GetShellDescriptorAsync">
            <summary>
            Uses shell-specific database or other resources to return
            the current "correct" configuration. The host will use this information
            to reinitialize the shell.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Descriptor.IShellDescriptorManager.UpdateShellDescriptorAsync(System.Int32,System.Collections.Generic.IEnumerable{OrchardCore.Environment.Shell.Descriptor.Models.ShellFeature})">
            <summary>
            Alters databased information to match information passed as arguments.
            Prior SerialNumber used for optimistic concurrency, and an exception
            should be thrown if the number in storage doesn't match what's provided.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Descriptor.Models.InstalledShellFeature.SerialNumber">
            <summary>
            The version number of the descriptor when the feature was installed.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor">
            <summary>
            Contains a snapshot of a tenant's enabled features.
            The information is drawn out of the shell via IShellDescriptorManager
            and is passed to the ICompositionStrategy to build the ShellBlueprint.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor.SerialNumber">
            <summary>
            Gets or sets the version number of the shell descriptor.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor.Features">
            <summary>
            Gets or sets the list of features in the shell.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor.Installed">
            <summary>
            Gets or sets the list of installed features in the shell.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Events.IShellEvents.LoadingAsync">
            <summary>
            The <see cref="T:OrchardCore.Environment.Shell.Events.ShellsEvent"/> delegate that will get called before loading all shells.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Events.IShellEvents.ReleasingAsync">
            <summary>
            The <see cref="T:OrchardCore.Environment.Shell.Events.ShellEvent"/> delegate that will get called before releasing a given shell.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Events.IShellEvents.ReloadingAsync">
            <summary>
            The <see cref="T:OrchardCore.Environment.Shell.Events.ShellEvent"/> delegate that will get called before reloading a given shell.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Events.IShellEvents.RemovingAsync">
            <summary>
            The <see cref="T:OrchardCore.Environment.Shell.Events.ShellEvent"/> delegate that will get called before removing a given shell.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Events.ShellEvent">
            <summary>
            The type of the delegate that will get called before releasing or reloading a given shell.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Events.ShellsEvent">
            <summary>
            The type of the delegate that will get called before loading all shells.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.IsPlaceholder(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Whether or not the tenant is only a placeholder built on loading, releasing or reloading.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.IsPreCreated(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Whether or not the tenant is only the placeholder pre-created on first loading.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.HasServices(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Whether or not the tenant container has been built on a first demand.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.HasPipeline(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Whether or not the tenant pipeline has been built on a first request.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.IsActive(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Whether or not the tenant is in use in at least one active scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.WithoutSharedSettings(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Marks this instance as using unshared <see cref="P:OrchardCore.Environment.Shell.Builders.ShellContext.Settings"/> that can be disposed.
            </summary>
            <remarks>
            This is the default but can be used if <see cref="M:OrchardCore.Environment.Shell.ShellContextExtensions.WithSharedSettings(OrchardCore.Environment.Shell.Builders.ShellContext)"/> may have been called.
            </remarks>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextExtensions.WithSharedSettings(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Marks this instance as using shared <see cref="P:OrchardCore.Environment.Shell.Builders.ShellContext.Settings"/> that should not be disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextFactoryExtensions.CreateMaximumContextAsync(OrchardCore.Environment.Shell.Builders.IShellContextFactory,OrchardCore.Environment.Shell.ShellSettings,System.Boolean)">
            <summary>
            Creates a maximum shell context composed of all installed features, and
            marked by default as using shared settings that should not be disposed. 
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextFactoryExtensions.CreateMinimumContextAsync(OrchardCore.Environment.Shell.Builders.IShellContextFactory,OrchardCore.Environment.Shell.ShellSettings,System.Boolean)">
            <summary>
            Creates a minimum shell context without any feature, and marked
            by default as using shared settings that should not be disposed. 
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellContextFactoryExtensions.GetShellDescriptorAsync(OrchardCore.Environment.Shell.Builders.IShellContextFactory,OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Gets the shell descriptor from the store.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellDescriptorExtensions.WasFeatureAlreadyInstalled(OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor,System.String)">
            <summary>
            Checks if the specified feature was already installed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostExtensions.TryGetScopeAsync(OrchardCore.Environment.Shell.IShellHost,System.String)">
            <summary>
            Tries to create a standalone service scope that can be used to resolve local services.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostExtensions.GetScopeAsync(OrchardCore.Environment.Shell.IShellHost,System.String)">
            <summary>
            Creates a standalone service scope that can be used to resolve local services.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostExtensions.ReloadAllShellContextsAsync(OrchardCore.Environment.Shell.IShellHost)">
            <summary>
            Reloads all shell settings and releases all shells so that new ones will be
            built for subsequent requests, while existing requests get flushed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostExtensions.ReleaseAllShellContextsAsync(OrchardCore.Environment.Shell.IShellHost)">
            <summary>
            Releases all shells so that new ones will be built for subsequent requests.
            Note: Can be used to free up resources after a given period of inactivity.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostExtensions.GetSettings(OrchardCore.Environment.Shell.IShellHost,System.String)">
            <summary>
            Retrieves the shell settings associated with the specified tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostExtensions.IsShellActive(OrchardCore.Environment.Shell.IShellHost,OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether or not a given tenant is in use in at least one active scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsDefaultShell(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is the 'Default' tenant or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsUninitialized(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is uninitialized or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsInitializing(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is initializing or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsRunning(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is running or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsDisabled(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is disabled or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsInitialized(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is initialized or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.IsRemovable(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether the tenant is removable or not.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.HasConfiguration(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Whether or not the tenant configuration has not been disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.HasUrlPrefix(OrchardCore.Environment.Shell.ShellSettings,System.String)">
            <summary>
            Whether or not the tenant has the provided url prefix.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.HasUrlHost(OrchardCore.Environment.Shell.ShellSettings,System.String)">
            <summary>
            Whether or not the tenant has one of the url host(s) defined by the provided string.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.HasUrlHost(OrchardCore.Environment.Shell.ShellSettings,System.String[])">
            <summary>
            Whether or not the tenant has one of the provided url hosts.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.AsDefaultShell(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            As the 'Default' tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.AsUninitialized(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            As an uninitialized tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.AsInitializing(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            As an initializing tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.AsRunning(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            As a running tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.AsDisabled(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            As a disabled tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettingsExtensions.AsDisposable(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Marks the tenant settings to be disposable.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellStringExtensions.IsDefaultShellName(System.String)">
            <summary>
            Whether or not the provided name is the 'Default' tenant name.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellStringExtensions.IsDefaultShellNameIgnoreCase(System.String)">
            <summary>
            Whether or not the provided name may be in conflict with the 'Default' tenant name.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.IFeatureValidationProvider">
            <summary>
            Provides validation for whether features are allowed to be disabled on a per tenant basis.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.IShellDescriptorManagerEventHandler">
            <summary>
            Represent an event handler for shell descriptor.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellDescriptorManagerEventHandler.ChangedAsync(OrchardCore.Environment.Shell.Descriptor.Models.ShellDescriptor,OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Triggered whenever a shell descriptor has changed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.InitializeAsync">
            <summary>
            Ensures that all the <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/> are pre-created and available to process requests.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.GetOrCreateShellContextAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Returns an existing <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/> or creates a new one if necessary.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.GetScopeAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Creates a standalone service scope that can be used to resolve local services.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.UpdateShellSettingsAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Updates an existing shell configuration and then reloads the shell.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.ReloadShellContextAsync(OrchardCore.Environment.Shell.ShellSettings,System.Boolean)">
            <summary>
            Reloads the settings and releases the shell so that a new one will be
            built for subsequent requests, while existing requests get flushed.
            </summary>
            <param name="settings">The <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/> to reload.</param>
            <param name="eventSource">Whether the related <see cref="T:OrchardCore.Environment.Shell.Events.ShellEvent"/> is invoked.</param>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.ReleaseShellContextAsync(OrchardCore.Environment.Shell.ShellSettings,System.Boolean)">
            <summary>
            Releases a shell so that a new one will be built for subsequent requests.
            Note: Can be used to free up resources after a given time of inactivity.
            </summary>
            <param name="settings">The <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/> to reload.</param>
            <param name="eventSource">Whether the related <see cref="T:OrchardCore.Environment.Shell.Events.ShellEvent"/> is invoked.</param>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.ListShellContexts">
            <summary>
            Lists all available <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/> instances.
            A shell might have been released or not yet built, if so 'shell.Released' is true and
            'shell.CreateScopeAsync()' return null, but you can still use 'GetScopeAsync(shell.Settings)'.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.TryGetShellContext(System.String,OrchardCore.Environment.Shell.Builders.ShellContext@)">
            <summary>
            Tries to retrieve the shell context associated with the specified tenant.
            The shell may have been temporarily removed while releasing or reloading.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.TryGetSettings(System.String,OrchardCore.Environment.Shell.ShellSettings@)">
            <summary>
            Tries to retrieve the shell settings associated with the specified tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.GetAllSettings">
            <summary>
            Retrieves all shell settings.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.RemoveShellSettingsAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Removes a shell context and its settings from memory and from the storage.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellHost.RemoveShellContextAsync(OrchardCore.Environment.Shell.ShellSettings,System.Boolean)">
            <summary>
            Removes a shell context and its settings but only from memory, used for syncing
            when the settings has been already removed from the storage by another instance.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellReleaseManager.RequestRelease">
            <summary>
            Adds a pending request to release the shell upon completion of the current HTTP-request.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellReleaseManager.SuspendReleaseRequest">
            <summary>
            It suspends the pending release request to ensure that the shell remains intact when 'ProcessAsync()' is invoked.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellSettingsManager.CreateDefaultSettings">
            <summary>
            Creates a default shell settings based on the configuration.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellSettingsManager.LoadSettingsAsync">
            <summary>
            Retrieves all shell settings stored.
            </summary>
            <returns>All shell settings.</returns>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellSettingsManager.LoadSettingsNamesAsync">
            <summary>
            Retrieves all shell settings names.
            </summary>
            <returns>All shell settings names.</returns>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellSettingsManager.LoadSettingsAsync(System.String)">
            <summary>
            Retrieves the settings of a given tenant.
            </summary>
            <returns>The shell settings.</returns>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellSettingsManager.SaveSettingsAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Persists shell settings to the storage.
            </summary>
            <param name="settings">The shell settings to store.</param>
        </member>
        <member name="M:OrchardCore.Environment.Shell.IShellSettingsManager.RemoveSettingsAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Removes shell settings from the storage.
            </summary>
            <param name="settings">The shell settings to remove.</param>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Models.FeatureProfilesRuleOptions">
            <summary>
            Provides options for validating features through profiles.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Models.TenantState">
            <summary>
            The different states of a Tenant.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.Models.TenantState.Uninitialized">
            <summary>
            The tenant is not yet initialized.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.Models.TenantState.Initializing">
            <summary>
            The tenant is being initialized.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.Models.TenantState.Running">
            <summary>
            The tenant is initialized and running.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.Models.TenantState.Disabled">
            <summary>
            The tenant is initialized and disabled.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.Models.TenantState.Invalid">
            <summary>
            The tenant settings are invalid.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Removing.IShellRemovalManager">
            <summary>
            Host service managing the removal of a given tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Removing.IShellRemovalManager.RemoveAsync(OrchardCore.Environment.Shell.ShellSettings,System.Boolean)">
            <summary>
            Removes the provided tenant.
            </summary>
            <param name="shellSettings">The tenant's <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/>.</param>
            <param name="localResourcesOnly">
            Indicates that only local (not shared among server nodes in case of a multi-node hosting evironment) resources should be removed.
            Used to sync locally a tenant that was removed by another instance.
            </param>
            <returns>A <see cref="T:OrchardCore.Environment.Shell.Removing.ShellRemovingContext"/>.</returns>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Removing.IShellRemovingHandler">
            <summary>
            Host service that collaborates on the removal of a given tenant.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Removing.IShellRemovingHandler.RemovingAsync(OrchardCore.Environment.Shell.Removing.ShellRemovingContext)">
            <summary>
            Collaborates on the removal of the provided tenant.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Scope.ShellScope">
            <summary>
            Custom 'IServiceScope' managing the shell state and the execution flow.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.#ctor(OrchardCore.Environment.Shell.Builders.ShellContext)">
            <summary>
            Initializes a <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> from a given parent <see cref="T:OrchardCore.Environment.Shell.Builders.ShellContext"/>.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Scope.ShellScope.ShellContext">
            <summary>
            The parent 'ShellContext' of this shell scope.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Scope.ShellScope.ServiceProvider">
            <summary>
            The 'IServiceProvider' of this shell scope.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Scope.ShellScope.Context">
            <summary>
            Retrieve the parent 'ShellContext' of the current shell scope.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Scope.ShellScope.Services">
            <summary>
            Retrieve the 'IServiceProvider' of the current shell scope.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.Scope.ShellScope.Current">
            <summary>
            Retrieve the current shell scope from the async flow.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.Set(System.Object,System.Object)">
            <summary>
            Sets a shared item to the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.Get(System.Object)">
            <summary>
            Gets a shared item from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.Get``1(System.Object)">
            <summary>
            Gets a shared item of a given type from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.GetOrCreate``1(System.Object,System.Func{``0})">
            <summary>
            Gets (or creates) a shared item of a given type from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.GetOrCreate``1(System.Object)">
            <summary>
            Gets (or creates) a shared item of a given type from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.SetFeature``1(``0)">
            <summary>
            Sets a shared feature to the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.GetFeature``1">
            <summary>
            Gets a shared feature from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.GetOrCreateFeature``1(System.Func{``0})">
            <summary>
            Gets (or creates) a shared feature from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.GetOrCreateFeature``1">
            <summary>
            Gets (or creates) a shared feature from the current shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.CreateChildScopeAsync">
            <summary>
            Creates a child scope from the current one.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.CreateChildScopeAsync(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Creates a child scope from the current one.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.CreateChildScopeAsync(System.String)">
            <summary>
            Creates a child scope from the current one.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.UsingChildScopeAsync(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Execute a delegate using a child scope created from the current one.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.UsingChildScopeAsync(OrchardCore.Environment.Shell.ShellSettings,System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Execute a delegate using a child scope created from the current one.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.UsingChildScopeAsync(System.String,System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Execute a delegate using a child scope created from the current one.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.StartAsyncFlow">
            <summary>
            Start holding this shell scope along the async flow.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.UsingServiceScopeAsync(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            Executes a delegate using this shell scope in an isolated async flow,
            but only as a service scope without managing the shell state and
            without invoking any tenant event.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.UsingAsync(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Executes a delegate using this shell scope in an isolated async flow,
            while managing the shell state and invoking tenant events.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.TerminateShellAsync">
            <summary>
            Terminates a shell using this shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.ActivateShellInternalAsync">
            <summary>
            Activate the shell, if not yet done, by calling the related tenant event handlers.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.BeforeDispose(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Registers a delegate to be invoked when 'BeforeDisposeAsync()' is called on this scope.
            </summary>
            <param name="callback">The delegate to be invoked before disposal. This delegate takes a <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> parameter and returns a <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <param name="last">A boolean value indicating whether the delegate should be invoked last. 
            If true, the delegate is added to the end of the invocation list; otherwise, it is added to the beginning.</param>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.DeferredSignal(System.String)">
            <summary>
            Adds a Signal (if not already present) to be sent just after 'BeforeDisposeAsync()'.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.DeferredTask(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            Adds a Task to be executed in a new scope after 'BeforeDisposeAsync()'.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.ExceptionHandler(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Adds an handler to be invoked if an exception is thrown while executing in this shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.RegisterBeforeDispose(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Registers a delegate to be invoked before the current shell scope will be disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.AddDeferredSignal(System.String)">
            <summary>
            Adds a Signal (if not already present) to be sent just before the current shell scope will be disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.AddDeferredTask(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            Adds a Task to be executed in a new scope once the current shell scope has been disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.AddExceptionHandler(System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Adds an handler to be invoked if an exception is thrown while executing in this shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.HandleExceptionAsync(System.Exception)">
            <summary>
            Invokes the registered delegates that should be executed if an exception is thrown while executing in this shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.BeforeDisposeAsync">
            <summary>
            Invokes the registered delegates that should be executed before disposing this shell scope,
            triggers the deferred signals and executes the deferred tasks in their own isolated scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScope.TerminateShellInternalAsync">
            <summary>
            Terminates the shell, if released and in its last scope, by calling the related event handlers,
            and specifies if the shell context should be disposed consequently to this scope being disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.RegisterBeforeDispose(OrchardCore.Environment.Shell.Scope.ShellScope,System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            Registers a delegate task to be invoked before this shell scope will be disposed.
            </summary>
            <param name="scope">The <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> instance on which to register the delegate.</param>
            <param name="callback">The delegate task to be invoked before disposal. This delegate takes a <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> parameter and returns a <see cref="T:System.Threading.Tasks.Task"/>.</param>
            <param name="last">A boolean value indicating whether the delegate should be invoked last. 
            If true, the delegate is added to the end of the invocation list; otherwise, it is added to the beginning. The default value is false.</param>
            <returns>The <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> instance for chaining further calls.</returns>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.RegisterBeforeDispose(OrchardCore.Environment.Shell.Scope.ShellScope,System.Action{OrchardCore.Environment.Shell.Scope.ShellScope},System.Boolean)">
            <summary>
            Registers a delegate action to be invoked before this shell scope will be disposed.
            </summary>
            <param name="scope">The <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> instance on which to register the delegate.</param>
            <param name="callback">The delegate action to be invoked before disposal. This delegate takes a <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> parameter.</param>
            <param name="last">A boolean value indicating whether the delegate should be invoked last. 
            If true, the delegate is added to the end of the invocation list; otherwise, it is added to the beginning. The default value is false.</param>
            <returns>The <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/> instance for chaining further calls.</returns>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.AddDeferredSignal(OrchardCore.Environment.Shell.Scope.ShellScope,System.String)">
            <summary>
            Adds a Signal (if not already present) to be sent just before this shell scope will be disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.AddDeferredTask(OrchardCore.Environment.Shell.Scope.ShellScope,System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Threading.Tasks.Task})">
            <summary>
            Adds a Task to be executed in a new scope once this shell scope has been disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.AddDeferredTask(OrchardCore.Environment.Shell.Scope.ShellScope,System.Action{OrchardCore.Environment.Shell.Scope.ShellScope})">
            <summary>
            Adds an Action to be executed in a new scope once this shell scope has been disposed.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.AddExceptionHandler(OrchardCore.Environment.Shell.Scope.ShellScope,System.Func{OrchardCore.Environment.Shell.Scope.ShellScope,System.Exception,System.Threading.Tasks.Task})">
            <summary>
            Adds an handler task to be invoked if an exception is thrown while executing in this shell scope.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeExtensions.AddExceptionHandler(OrchardCore.Environment.Shell.Scope.ShellScope,System.Action{OrchardCore.Environment.Shell.Scope.ShellScope,System.Exception})">
            <summary>
            Adds an handler action to be invoked if an exception is thrown while executing in this shell scope.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.Scope.ShellScopeServices">
            <summary>
            Makes an 'IServiceProvider' aware of the current 'ShellScope'.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.Scope.ShellScopeServices.#ctor(System.IServiceProvider)">
            <summary>
            Makes an 'IServiceProvider' aware of the current 'ShellScope'.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.ShellContextFeature">
            <summary>
            Used to capture the shell context and original path infos.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellContextFeature.ShellContext">
            <summary>
            The current shell context.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellContextFeature.OriginalPathBase">
            <summary>
            The original path base.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellContextFeature.OriginalPath">
            <summary>
            The original path.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.ShellHostReloadException">
            <summary>
            The <see cref="T:System.Exception"/> that is thrown if <see cref="M:OrchardCore.Environment.Shell.IShellHost.ReloadShellContextAsync(OrchardCore.Environment.Shell.ShellSettings,System.Boolean)"/> fails.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellHostReloadException.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:OrchardCore.Environment.Shell.ShellHostReloadException"/> with the specified
            exception message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellOptions.ShellsApplicationDataPath">
            <summary>
            The root container.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellOptions.ShellsContainerName">
            <summary>
            The container for shells.
            </summary>
        </member>
        <member name="T:OrchardCore.Environment.Shell.ShellSettings">
            <summary>
            The minimalistic set of settings fields and the configuration of a given tenant, all data can be first provided
            by regular configuration sources, then by default settings of all tenants are stored in 'App_Data/tenants.json',
            while each tenant configuration is stored in the related site folder 'App_Data/Sites/{tenant}/appsettings.json'.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.ShellSettings.DefaultShellName">
            <summary>
            The name of the 'Default' tenant.
            </summary>
        </member>
        <member name="F:OrchardCore.Environment.Shell.ShellSettings.HostSeparators">
            <summary>
            The 'RequestUrlHost' string separators allowing to provide multiple hosts.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettings.#ctor">
            <summary>
            Initializes a new <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettings.#ctor(OrchardCore.Environment.Shell.Configuration.ShellConfiguration,OrchardCore.Environment.Shell.Configuration.ShellConfiguration)">
            <summary>
            Initializes a new <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/> from an existing one
            and from an existing <see cref="T:OrchardCore.Environment.Shell.Configuration.ShellConfiguration"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettings.#ctor(OrchardCore.Environment.Shell.ShellSettings)">
            <summary>
            Initializes a new <see cref="T:OrchardCore.Environment.Shell.ShellSettings"/> from an existing one.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.Name">
            <summary>
            The tenant name.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.Disposed">
            <summary>
            Whether this instance has been disposed or not.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.Disposable">
            <summary>
            Whether this instance is disposable or not.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.VersionId">
            <summary>
            The tenant version identifier.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.TenantId">
            <summary>
            The tenant identifier.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.RequestUrlHost">
            <summary>
            The tenant request url host, multiple separated hosts may be provided.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.RequestUrlHosts">
            <summary>
            The tenant request url host(s).
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.RequestUrlPrefix">
            <summary>
            The tenant request url prefix.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.State">
            <summary>
            The tenant state.
            </summary>
        </member>
        <member name="P:OrchardCore.Environment.Shell.ShellSettings.ShellConfiguration">
            <summary>
            The tenant configuration.
            </summary>
        </member>
        <member name="M:OrchardCore.Environment.Shell.ShellSettings.EnsureConfigurationAsync">
            <summary>
            Ensures that the tenant configuration is initialized.
            </summary>
        </member>
        <member name="M:OrchardCore.Json.Extensions.JsonSerializerOptionsExtensions.Merge(System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Merges the given <see cref="T:System.Text.Json.JsonSerializerOptions"/> into the current options.
            </summary>
        </member>
        <member name="T:OrchardCore.Localization.CalendarName">
            <summary>
            Represents an enum for calendar names.
            </summary>
        </member>
        <member name="T:OrchardCore.Localization.CalendarSelectorResult">
            <summary>
            Represents a result for the selected calendar.
            </summary>
        </member>
        <member name="P:OrchardCore.Localization.CalendarSelectorResult.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
        </member>
        <member name="P:OrchardCore.Localization.CalendarSelectorResult.CalendarName">
            <summary>
            Gets or sets a calendar name.
            </summary>
        </member>
        <member name="T:OrchardCore.Localization.CultureOptions">
            <summary>
            Represents a programmable options for localization culture.
            </summary>
        </member>
        <member name="P:OrchardCore.Localization.CultureOptions.IgnoreSystemSettings">
            <summary>
            Gets or sets whether to ignore the system culture settings or not.
            </summary>
            <remarks>
            The current culture should not depend on local computer settings by default.
            For more information refer to https://github.com/OrchardCMS/OrchardCore/issues/11228.
            </remarks>
        </member>
        <member name="T:OrchardCore.Localization.CultureScope">
            <summary>
            Represents a scope that you can change the current culture within.
            </summary>
            <remarks>
            The scope disallow the current culture depends on local computer settings by default.
            For more information refer to https://github.com/OrchardCMS/OrchardCore/issues/11228.
            </remarks>
        </member>
        <member name="P:OrchardCore.Localization.CultureScope.Culture">
            <summary>
            Gets the current culture.
            </summary>
        </member>
        <member name="P:OrchardCore.Localization.CultureScope.UICulture">
            <summary>
            Get the current UI culture.
            </summary>
        </member>
        <member name="M:OrchardCore.Localization.CultureScope.Create(System.String,System.Boolean)">
            <summary>
            Creates a scope with a given culture.
            </summary>
            <param name="culture">The culture that will be used within the scope.</param>
            <param name="ignoreSystemSettings">Whether to ignore the system culture settings or not. Defaults to <c>false</c>.</param>
        </member>
        <member name="M:OrchardCore.Localization.CultureScope.Create(System.String,System.String,System.Boolean)">
            <summary>
            Creates a scope with a given culture.
            </summary>
            <param name="culture">The culture that will be used within the scope.</param>
            <param name="uiCulture">The UI culture that will be used within the scope.</param>
            <param name="ignoreSystemSettings">Whether to ignore the system culture settings or not. Defaults to <c>false</c>.</param>
        </member>
        <member name="M:OrchardCore.Localization.CultureScope.Create(System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Creates a scope with a given culture.
            </summary>
            <param name="culture">The culture that will be used within the scope.</param>
            <param name="ignoreSystemSettings">Whether to ignore the system culture settings or not. Defaults to <c>false</c>.</param>
        </member>
        <member name="M:OrchardCore.Localization.CultureScope.Create(System.Globalization.CultureInfo,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            Creates a scope with a given culture.
            </summary>
            <param name="culture">The culture that will be used within the scope.</param>
            <param name="uiCulture">The UI culture that will be used within the scope.</param>
            <param name="ignoreSystemSettings">Whether to ignore the system culture settings or not. Defaults to <c>false</c>.</param>
        </member>
        <member name="M:OrchardCore.Localization.CultureScope.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:OrchardCore.Localization.ICalendarManager">
            <summary>
            Represents a contract for manage calendars.
            </summary>
        </member>
        <member name="M:OrchardCore.Localization.ICalendarManager.GetCurrentCalendar">
            <summary>
            Gets the current calendar.
            </summary>
            <returns>The current calendar name.</returns>
        </member>
        <member name="T:OrchardCore.Localization.ICalendarSelector">
            <summary>
            Represents a contract for selection a calendar.
            </summary>
        </member>
        <member name="M:OrchardCore.Localization.ICalendarSelector.GetCalendarAsync">
            <summary>
            Gets a calendar.
            </summary>
            <returns>The selected calendar.</returns>
        </member>
        <member name="T:OrchardCore.Localization.ILocalizationService">
            <summary>
            Represents a contract for a localization service.
            </summary>
        </member>
        <member name="M:OrchardCore.Localization.ILocalizationService.GetDefaultCultureAsync">
            <summary>
            Returns the default culture of the site.
            </summary>
        </member>
        <member name="M:OrchardCore.Localization.ILocalizationService.GetSupportedCulturesAsync">
            <summary>
            Returns all the supported cultures of the site. It also contains the default culture.
            </summary>
        </member>
        <member name="M:OrchardCore.Localization.ILocalizationService.GetAllCulturesAndAliases">
            <summary>
            Gets all cultures recognized by .NET, including culture aliases.
            </summary>
        </member>
        <member name="M:OrchardCore.Locking.ILock.AcquireLockAsync(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Waits indefinitely until acquiring a named lock with a given expiration for the current tenant.
            After 'expiration' the lock is auto released, a null value is equivalent to 'TimeSpan.MaxValue'.
            </summary>
        </member>
        <member name="M:OrchardCore.Locking.ILock.TryAcquireLockAsync(System.String,System.TimeSpan,System.Nullable{System.TimeSpan})">
            <summary>
            Tries to acquire a named lock in a given timeout with a given expiration for the current tenant.
            After 'expiration' the lock is auto released, a null value is equivalent to 'TimeSpan.MaxValue'.
            </summary>
        </member>
        <member name="M:OrchardCore.Locking.ILock.IsLockAcquiredAsync(System.String)">
            <summary>
            Whether a named lock is already acquired.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.StartupActionsStartup">
            <summary>
            Represents a fake Startup class that is composed of Configure and ConfigureServices lambdas.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.HttpContextExtensions.UseShellScopeServices(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Makes <see cref="P:Microsoft.AspNetCore.Http.HttpContext.RequestServices"/> aware of the current <see cref="T:OrchardCore.Environment.Shell.Scope.ShellScope"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.Invoke``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.Invoke``2(System.Collections.Generic.IEnumerable{``0},System.Action{``0,``1},``1,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.InvokeAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.InvokeAsync``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,System.Threading.Tasks.Task},``1,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.InvokeAsync``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,System.Threading.Tasks.Task},``1,``2,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.InvokeAsync``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task},``1,``2,``3,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.InvokeAsync``5(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,System.Threading.Tasks.Task},``1,``2,``3,``4,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.InvokeExtensions.InvokeAsync``6(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``2,``3,``4,``5,System.Threading.Tasks.Task},``1,``2,``3,``4,``5,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Safely invoke methods by catching non fatal exceptions and logging them.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.FeatureAttribute">
            <summary>
            An attribute that can associate a service or component with
            a specific feature by its name. This component will only
            be used if the feature is enabled.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.FeatureAttribute.FeatureName">
            <summary>
            The name of the feature to assign the component to.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo">
            <summary>
            Represents a directory on a physical filesystem.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo"/>.
            </summary>
            <param name="name">The directory.</param>
        </member>
        <member name="P:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.Exists">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.Length">
            <summary>
            Always equals -1.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.PhysicalPath">
            <summary>
            Always null.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.LastModified">
            <summary>
            The time when the directory was last written to.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.IsDirectory">
            <summary>
            Always true.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.FileProviders.EmbeddedDirectoryInfo.CreateReadStream">
            <summary>
            Always throws an exception because read streams are not support on directories.
            </summary>
            <exception cref="T:System.InvalidOperationException">Always thrown.</exception>
            <returns>Never returns.</returns>
        </member>
        <member name="T:OrchardCore.Modules.FileProviders.IStaticFileProvider">
            <summary>
            This custom <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> implementation provides Di registration identification
            for IStaticFileProviders that should be served via UseStaticFiles.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.FileProviders.NormalizedPaths.ResolveFolderContents(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Use a collection of file paths to resolve files and subfolders directly under a given folder.
            Paths need to be normalized by using '/' for the directory separator and with no leading '/'.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.IAsyncStartup">
            <summary>
            An implementation of this interface allows to configure asynchronously the tenant pipeline.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.IAsyncStartup.ConfigureAsync(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider)">
            <summary>
            This method gets called by the runtime. Use this method to configure the tenant pipeline.
            </summary>
            <param name="builder"></param>
            <param name="routes"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:OrchardCore.Modules.IModuleStaticFileProvider">
            <summary>
            This custom <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> implementation provides Di registration identification
            for IStaticFileProviders that should be served via UseStaticFiles.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.IStartup">
            <summary>
            An implementation of this interface is used to initialize the services and HTTP request
            pipeline of a module.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.IStartup.Order">
            <summary>
            Get the value to use to order startups to configure services. The default is 0.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.IStartup.ConfigureOrder">
            <summary>
            Get the value to use to order startups to build the pipeline. The default is the 'Order' property.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.IStartup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940.
            </summary>
            <param name="services">The collection of service descriptors.</param>
        </member>
        <member name="M:OrchardCore.Modules.IStartup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="builder"></param>
            <param name="routes"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:OrchardCore.Modules.Manifest.FeatureAttribute">
            <summary>
            Defines a Feature in a Module, can be used multiple times.
            If at least one Feature is defined, the Module default feature is ignored.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.#ctor">
            <summary>
            Default parameterless ctor.
            </summary>
            <remarks>Cannot route to <c>this(...)</c> in any form here due to restrictions on the Id property setter.</remarks>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.#ctor(System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Constructs an instance of the attribute with some default values.
            </summary>
            <param name="id">An identifier overriding the Name.</param>
            <param name="description">A simple feature description.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/> properties.</param>
            <param name="defaultTenant">Whether considered default tenant only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.</param>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.#ctor(System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Constructs an instance of the attribute with some default values.
            </summary>
            <param name="id">An identifier overriding the Name.</param>
            <param name="name">The feature name, defaults to <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/> when null or
            blank.</param>
            <param name="description">A simple feature description.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/> properties.</param>
            <param name="defaultTenant">Whether considered default tenant only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Constructs an instance of the attribute with some default values.
            </summary>
            <param name="id">An identifier overriding the Name.</param>
            <param name="name">The feature name, defaults to <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/> when null or
            blank.</param>
            <param name="category">A simple feature category.</param>
            <param name="priority">The priority of the Feature.</param>
            <param name="description">A simple feature description.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/> properties.</param>
            <param name="defaultTenant">Whether considered default tenant only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Exists">
            <summary>
            Whether the feature exists based on the <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/>.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id">
            <summary>
            Gets or sets the feature identifier. Identifier is required.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.StringOrNull(System.String)">
            <summary>
            Returns the <see cref="T:System.String"/> <paramref name="s"/> as is, or <c>null</c> when that
            or <see cref="F:System.String.Empty"/>.
            </summary>
            <param name="s">The string value to consider.</param>
            <returns>The <paramref name="s"/> value as is, or Null when either that or Empty.</returns>
            <see cref="M:System.String.IsNullOrEmpty(System.String)"/>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name">
            <summary>
            Gets or sets the human readable or canonical feature name. <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/> will be
            returned when not provided or blank.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.GetValues``1(``0[])">
            <summary>
            Yields return of the <paramref name="values"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Description">
            <summary>
            Gets or sets a brief summary of what the feature does.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.Describe(OrchardCore.Modules.Manifest.FeatureAttribute[])">
            <summary>
            Describes the first or default Feature starting with This instance,
            which defines a <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Description"/>.
            </summary>
            <param name="additionalFeatures">Additional Features to consider in the aggregate.</param>
            <returns>The first or default Description with optional back stop features.</returns>
        </member>
        <member name="F:OrchardCore.Modules.Manifest.FeatureAttribute.DefaultSplitOptions">
            <summary>
            <see cref="F:System.StringSplitOptions.TrimEntries"/> | <see cref="F:System.StringSplitOptions.RemoveEmptyEntries"/>, trim the entries, and
            remove the empty ones.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.ListDelims">
            <summary>
            Gets the default known ListDelims supporting <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Dependencies"/> splits, etc.
            Semi-colon (&apos;;&apos;) delimiters are most common, expected from a <em>CSPROJ</em>
            perspective. Also common are comma (&apos;,&apos;) and space (&apos; &apos;)
            delimiters.
            </summary>
            <see cref="M:System.String.Split(System.Char[],System.StringSplitOptions)"/>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.DelimitedDependencies">
            <summary>
            Set-only <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Dependencies"/> property.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Dependencies">
            <summary>
            Gets or sets an array of Feature Dependencies. Used to arrange drivers, handlers
            invoked during startup and so forth.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Priority">
            <summary>
            Gets or sets the feature priority without breaking the <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Dependencies"/>
            order. The higher is the priority, the later the drivers / handlers are invoked.
            </summary>
            <remarks>The default value is aligned with <see cref="F:OrchardCore.Modules.Manifest.FeatureAttribute.DefaultPriority"/>, consistent
            with the baseline, however, could be nullified, which would in turn favor the parent
            <see cref="T:OrchardCore.Modules.Manifest.ModuleAttribute"/>.</remarks>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.InternalPriority">
            <summary>
            Gets the <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Priority"/>, parsed and ready to go for Internal use. May yield
            <c>null</c> when failing to <see cref="M:System.Int32.TryParse(System.String,System.Int32@)"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.Prioritize(OrchardCore.Modules.Manifest.FeatureAttribute[])">
            <summary>
            Prioritizes the Features starting with This one, concatenating
            <paramref name="additionalFeatures"/>, and lifting the <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.InternalPriority"/>
            from there. We prefer the first non Null Priority, default
            <see cref="F:OrchardCore.Modules.Manifest.FeatureAttribute.DefaultPriority"/>.
            </summary>
            <param name="additionalFeatures"></param>
            <returns></returns>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.Category">
            <summary>
            Gets or sets the Category for use with the Module.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.FeatureAttribute.Categorize(OrchardCore.Modules.Manifest.FeatureAttribute[])">
            <summary>
            Categorizes This <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Category"/> using <paramref name="additionalFeatures"/> as
            back stops, presents the <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Category"/> that is not Null nor Empty, or returns
            <see cref="F:OrchardCore.Modules.Manifest.FeatureAttribute.DefaultCategory"/> by default.
            </summary>
            <param name="additionalFeatures">Additional Feature instances to use as potential back stops.</param>
            <returns>The Category normalized across This instance and optional Module.</returns>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.DefaultTenantOnly">
            <summary>
            Set to <c>true</c> to only allow the <em>Default tenant to enable or disable</em> the feature.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.IsAlwaysEnabled">
            <summary>
            Once enabled, check whether the feature cannot be disabled. Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.FeatureAttribute.EnabledByDependencyOnly">
            <summary>
            Set to <c>true</c> to make the feature available by dependency only.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.Manifest.ModuleAssetAttribute">
            <summary>
            Maps a module asset to its project location while in debug mode, auto generated on building.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAssetAttribute.Asset">
            <Summary>
            A module asset in the form of '{ModuleAssetPath}|{ProjectAssetPath}'.
            </Summary>
        </member>
        <member name="T:OrchardCore.Modules.Manifest.ModuleAttribute">
            <summary>
            Defines a Module which is composed of features. If the Module has only one default
            feature, it may be defined there.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleAttribute.#ctor">
            <summary>
            Default parameterless ctor.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Ctor allowing <paramref name="author"/>, as well as defaults for
            <paramref name="websiteUrl"/>, <paramref name="semVer"/>, and <paramref name="tags"/>.
            </summary>
            <param name="id">The identifier for the Module.</param>
            <param name="description">A simple feature description.</param>
            <param name="author">The module author name.</param>
            <param name="semVer">Semantic Version string.</param>
            <param name="websiteUrl">The module website URL.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/>
            properties.</param>
            <param name="tags">Tags associated with the Module.</param>
            <param name="defaultTenant">Whether considered default tenant only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <see cref="!:https://semver.org">Semantic Versioning.</see>
            <remarks>At least <paramref name="author" /> expected herein to differentiate with
            parameterless ctor.</remarks>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Ctor allowing <paramref name="author"/>, as well as defaults for
            <paramref name="websiteUrl"/>, <paramref name="semVer"/>, and <paramref name="tags"/>.
            </summary>
            <param name="id">The identifier for the Module.</param>
            <param name="name">The feature name, defaults to <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/>
            when null or blank.</param>
            <param name="description">A simple feature description.</param>
            <param name="author">The module author name.</param>
            <param name="semVer">Semantic Version string.</param>
            <param name="websiteUrl">The module website URL.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/>
            properties.</param>
            <param name="tags">Tags associated with the Module.</param>
            <param name="defaultTenant">Whether considered default tenant only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <see cref="!:https://semver.org">Semantic Versioning.</see>
            <remarks>At least <paramref name="author" /> expected herein to differentiate with
            parameterless ctor.</remarks>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Ctor allowing <paramref name="author"/>, as well as defaults for
            <paramref name="websiteUrl"/>, <paramref name="semVer"/>, and <paramref name="tags"/>.
            </summary>
            <param name="id">The identifier for the Module.</param>
            <param name="name">The feature name, defaults to <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/>
            when null or blank.</param>
            <param name="category">A simple feature category.</param>
            <param name="priority">Priority for the Module.</param>
            <param name="description">A simple feature description.</param>
            <param name="author">The module author name.</param>
            <param name="semVer">Semantic Version string.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/>
            properties.</param>
            <param name="websiteUrl">The module website URL.</param>
            <param name="tags">Tags associated with the Module.</param>
            <param name="defaultTenant">Whether considered default tenant only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <see cref="!:https://semver.org">Semantic Versioning.</see>
            <remarks>At least <paramref name="author" /> expected herein to differentiate with
            parameterless ctor.</remarks>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Ctor allowing <paramref name="author"/>, as well as defaults for
            <paramref name="websiteUrl"/>, <paramref name="semVer"/>, and <paramref name="tags"/>.
            </summary>
            <param name="id">The identifier for the Module.</param>
            <param name="name">The feature name, defaults to <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Id"/>
            when null or blank.</param>
            <param name="type">User provided type of the Module.</param>
            <param name="category">A simple feature category.</param>
            <param name="priority">Priority for the Module.</param>
            <param name="description">A simple feature description.</param>
            <param name="author">The module author name.</param>
            <param name="semVer">Semantic Version string.</param>
            <param name="featureDependencies">Zero or more delimited feature dependencies,
            corresponding to each of the feature <see cref="P:OrchardCore.Modules.Manifest.FeatureAttribute.Name"/>
            properties.</param>
            <param name="websiteUrl">The module website URL.</param>
            <param name="tags">Tags associated with the Module.</param>
            <param name="defaultTenant">Whether considered default tenant only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <param name="alwaysEnabled">Whether feature is always enabled.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
            <see cref="!:https://semver.org">Semantic Versioning.</see>
            <remarks>At least <paramref name="author" /> expected herein to differentiate with
            parameterless ctor.</remarks>
            <param name="enabledByDependencyOnly">Whether feature is enabled by dependency only.
            Supported types are <see cref="T:System.String"/> and <see cref="T:System.Boolean"/> only.</param>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleAttribute.GetAttributePrefix(System.Type)">
            <summary>
            Returns the <see cref="P:System.Reflection.MemberInfo.Name"/> less the
            <see cref="T:System.Attribute"/> suffix when present.
            </summary>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.Type">
            <summary>
            Gets or sets the Type. Allows authors to identify the attribute by a logical,
            human-readable Type. Defaults to the abbreviated <see cref="T:System.Attribute"/> class name,
            sans suffix.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.Author">
            <summary>
            Gets or sets the name of the developer.
            </summary>
            <see cref="F:OrchardCore.Modules.Manifest.ModuleAttribute.DefaultAuthor" />
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.Website">
            <summary>
            Gets or sets the URL for the website of the developer.
            </summary>
            <see cref="F:OrchardCore.Modules.Manifest.ModuleAttribute.DefaultWebsiteUrl" />
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.Version">
            <summary>
            Gets or sets the Semantic Version string.
            </summary>
            <see cref="!:https://semver.org">Semantic Versioning.</see>
            <see cref="F:OrchardCore.Modules.Manifest.ModuleAttribute.DefaultVersionZero" />
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.DelimitedTags">
            <summary>
            Set-only <see cref="P:OrchardCore.Modules.Manifest.ModuleAttribute.Tags"/> property.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.Tags">
            <summary>
            Gets or sets an array of enumerated Tags.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleAttribute.Features">
            <summary>
            Gets a list of Features attributes associated with the Module.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.Manifest.ModuleMarkerAttribute">
            <summary>
            Marks an assembly as a module of a given type, auto generated on building.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Manifest.ModuleMarkerAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs the attribute given <paramref name="id"/> and <paramref name="type"/>.
            </summary>
            <param name="id">The identifier for the Module.</param>
            <param name="type">Allows authors to specify a module specific Type.</param>
        </member>
        <member name="T:OrchardCore.Modules.Manifest.ModuleNameAttribute">
            <summary>
            Enlists the package or project name of a referenced module, auto generated on building.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.Manifest.ModuleNameAttribute.Name">
            <Summary>
            The package or project name of the referenced module.
            </Summary>
        </member>
        <member name="T:OrchardCore.Modules.ITimeZone">
            <summary>
            Represents a time zone.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Module.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs an instance of the Module.
            </summary>
            <param name="assemblyName">The assembly name to use when loading itself.</param>
            <param name="isApplication">Whether the Module may be considered to be the &quot;Application&quot;.</param>
        </member>
        <member name="T:OrchardCore.Modules.ModuleCompositeStaticFileProvider">
            <summary>
            This custom <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> implementation provides Di registration identification
            for IStaticFileProviders that should be served via UseStaticFiles.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.ModuleEmbeddedFileProvider">
            <summary>
            This custom <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> implementation provides the file contents
            of embedded files in Module assemblies.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.ModuleEmbeddedStaticFileProvider">
            <summary>
            This custom <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> implementation provides the file contents
            of embedded files in Module assemblies whose path is under a Module 'wwwroot' folder.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.ModuleProjectStaticFileProvider">
            <summary>
            This custom <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> implementation provides the file contents of files
            whose path is under a Module Project 'wwwroot' folder, and while in a development environment.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.RequireFeaturesAttribute">
            <summary>
            When used on a class, it will include the service only
            if the specific features are enabled.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.RequireFeaturesAttribute.RequiredFeatureNames">
            <summary>
            The names of the required features.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.ClockExtensions.ConvertToTimeZone(OrchardCore.Modules.IClock,System.DateTime,OrchardCore.Modules.ITimeZone)">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to the specified <see cref="T:OrchardCore.Modules.ITimeZone" /> instance.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.ClockExtensions.ConvertToLocalAsync(OrchardCore.Modules.ILocalClock,System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime" /> to the specified <see cref="T:OrchardCore.Modules.ITimeZone" /> instance.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.IClock">
            <summary>
            Provides the current UTC <see cref="T:System.DateTime"/>, and timezone related methods.
            This service should be used whenever the current date and time are needed, instead of <seealso cref="T:System.DateTime"/> directly.
            If local date time and timezones are needed use <see cref="T:OrchardCore.Modules.ILocalClock" /> instead.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.IClock.UtcNow">
            <summary>
            Gets the current <see cref="T:System.DateTime"/> of the system, expressed in UTC.
            </summary>
            <remarks>
            A <see cref="T:System.DateTime"/> as this property is usually used to store the current date time in UTC and a <see cref="T:System.DateTimeOffset" />
            would affect usability.
            </remarks>
        </member>
        <member name="M:OrchardCore.Modules.IClock.GetTimeZones">
            <summary>
            Returns the list of all available <see cref="T:OrchardCore.Modules.ITimeZone" />.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.IClock.GetTimeZone(System.String)">
            <summary>
            Returns a <see cref="T:OrchardCore.Modules.ITimeZone" /> from a time zone id or the local system's one if not found.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.IClock.GetSystemTimeZone">
            <summary>
            Returns a default <see cref="T:OrchardCore.Modules.ITimeZone" /> for the system.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.IClock.ConvertToTimeZone(System.DateTimeOffset,OrchardCore.Modules.ITimeZone)">
            <summary>
            Converts a <see cref="T:System.DateTimeOffset" /> to the specified <see cref="T:OrchardCore.Modules.ITimeZone" /> instance.
            </summary>
        </member>
        <member name="T:OrchardCore.Modules.ILocalClock">
            <summary>
            Provides local values of the current time and time zone.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.ILocalClock.LocalNowAsync">
            <summary>
            Gets the time for the local time zone.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.ILocalClock.GetLocalTimeZoneAsync">
            <summary>
            Returns the local time zone.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.ILocalClock.ConvertToLocalAsync(System.DateTimeOffset)">
            <summary>
            Converts a <see cref="T:System.DateTimeOffset" /> to the specified <see cref="T:OrchardCore.Modules.ITimeZone" /> instance.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.ILocalClock.ConvertToUtcAsync(System.DateTime)">
            <summary>
            Converts a <see cref="T:System.DateTime" /> representing a local time to the UTC value.
            </summary>
        </member>
        <member name="M:OrchardCore.Modules.Services.ISlugService.Slugify(System.String)">
            <summary>
            Transforms specified text to the form suitable for URL slugs.
            </summary>
            <param name="text">The text to transform.</param>
            <returns>The slug created from the input text.</returns>
        </member>
        <member name="M:OrchardCore.Modules.Services.ISlugService.Slugify(System.String,System.Char)">
            <summary>
            Transforms specified text to a custom form generally not suitable for URL slugs.
            Allows you to use a specified separator char.
            </summary>
            <param name="text">The text to transform.</param>
            <param name="separator">The separator char.</param>
            <returns>The slug created from the input text.</returns>
        </member>
        <member name="T:OrchardCore.Modules.ITimeZoneSelector">
            <summary>
            Provides the timezone for the current request.
            </summary>
        </member>
        <member name="P:OrchardCore.Modules.StartupBase.Order">
            <inheritdoc />
        </member>
        <member name="P:OrchardCore.Modules.StartupBase.ConfigureOrder">
            <inheritdoc />
        </member>
        <member name="M:OrchardCore.Modules.StartupBase.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:OrchardCore.Modules.StartupBase.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:OrchardCore.Modules.StartupBase.ConfigureAsync(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:OrchardCore.Routing.IShellRouteValuesAddressScheme">
            <summary>
            Marker interface to retrieve tenant 'RouteValuesAddress' schemes used for link generation.
            </summary>
        </member>
        <member name="T:OrchardCore.Routing.ShellRouteValuesAddressScheme">
            <summary>
            Allows a tenant to add its own 'RouteValuesAddress' schemes used for link generation.
            </summary>
        </member>
        <member name="M:System.Text.Json.JConvert.SerializeObject``1(``0,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Converts the provided value into a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JConvert.DeserializeObject``1(System.String,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Parses the text representing a single JSON value into a <typeparamref name="TValue"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JConvert.TryGetBigInteger(System.Text.Json.JsonElement,System.Numerics.BigInteger@)">
            <summary>
            Attempts to read a <see cref="T:System.Numerics.BigInteger"/> value from a <see cref="T:System.Text.Json.JsonElement"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.JConvert.TryGetBigInteger(System.Text.Json.Utf8JsonReader@,System.Numerics.BigInteger@)">
            <summary>
            Attempts to read a <see cref="T:System.Numerics.BigInteger"/> value from a <see cref="T:System.Text.Json.Utf8JsonReader"/>.
            </summary>
        </member>
        <member name="T:System.Text.Json.JOptions">
            <summary>
            Centralizes common <see cref="T:System.Text.Json.JsonSerializerOptions" /> instances.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.LoadAsync(System.IO.Stream)">
            <summary>
            Loads a JSON array from the provided stream.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.LoadAsync(System.IO.Stream,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Loads a JSON array from the provided stream.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.Load(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
            Loads a JSON array from the provided reader.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.Parse(System.String)">
            <summary>
            Parses text representing a single JSON array.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.TryParse(System.String,System.Text.Json.Nodes.JsonArray@)">
            <summary>
            Tries to parse text representing a single JSON array.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses text representing a single JSON array.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.TryParse(System.String,System.Text.Json.Nodes.JsonArray@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Tries to parse text representing a single JSON array.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.FromObject(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:System.Text.Json.Nodes.JsonArray"/> from an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.Clone(System.Text.Json.Nodes.JsonArray)">
            <summary>
            Creates a new instance from an existing <see cref="T:System.Text.Json.Nodes.JsonArray"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.ContainsValue(System.Text.Json.Nodes.JsonArray,System.Text.Json.Nodes.JsonValue)">
            <summary>
            Whether this <see cref="T:System.Text.Json.Nodes.JsonArray"/> contains the provided <see cref="T:System.Text.Json.Nodes.JsonValue"/> or not.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JArray.Merge(System.Text.Json.Nodes.JsonArray,System.Text.Json.Nodes.JsonNode,System.Text.Json.Settings.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:System.Text.Json.Nodes.JsonArray"/> using <see cref="T:System.Text.Json.Settings.JsonMergeSettings"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.LoadAsync(System.IO.Stream)">
            <summary>
            Loads a JSON node (including objects or arrays) from the provided stream.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.LoadAsync(System.IO.Stream,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Loads a JSON node (including objects or arrays) from the provided stream.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Load(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
            Loads a JSON node (including objects or arrays) from the provided reader.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Parse(System.String)">
            <summary>
            Parses text representing a single JSON node.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.TryParse(System.String,System.Text.Json.Nodes.JsonNode@)">
            <summary>
            Tries to parse text representing a single JSON node.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses text representing a single JSON node.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.TryParse(System.String,System.Text.Json.Nodes.JsonNode@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Tries to parse text representing a single JSON node.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.FromObject(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:System.Text.Json.Nodes.JsonNode"/> from an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Clone(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Creates a new instance from an existing <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.ToObject``1(System.Text.Json.Nodes.JsonNode,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates an instance of the specified type from this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.ToObject(System.Text.Json.Nodes.JsonNode,System.Type,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates an instance of the specified type from this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Value``1(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Gets the value of the specified type of this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.ValueOrDefault``1(System.Text.Json.Nodes.JsonNode,``0)">
            <summary>
            Gets the value of the specified type of this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Value``1(System.Text.Json.Nodes.JsonNode,System.String)">
            <summary>
            Gets the value of the specified type from the specified property of this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.ValueOrDefault``1(System.Text.Json.Nodes.JsonNode,System.String,``0)">
            <summary>
            Gets the value of the specified type from the specified property of this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Value``1(System.Text.Json.Nodes.JsonNode,System.Int32)">
            <summary>
            Gets the value of the specified type from the specified index of this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.HasValues(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Whether this node contains elements or not.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Values``1(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Gets the values of the specified type of this <see cref="T:System.Text.Json.Nodes.JsonNode"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.GetNormalizedPath(System.String)">
            <summary>
            Gets the normalized JSON path by skipping the root part '$'.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.GetNormalizedPath(System.Text.Json.Nodes.JsonNode)">
            <summary>
            Gets the normalized JSON path by skipping the root path '$'.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.SelectNode(System.Text.Json.Nodes.JsonNode,System.String,Json.Path.PathParsingOptions)">
            <summary>
            Selects a <see cref="T:System.Text.Json.Nodes.JsonNode"/> from this <see cref="T:System.Text.Json.Nodes.JsonObject"/> using JSONPath.
            </summary>
            <param name="jsonNode">The JSON node which serves as the root of the current search..</param>
            <param name="path">The JSONPath query where <c>$</c> is <paramref name="jsonNode"/>.</param>
            <param name="options">Optional settings to configure the JSONPath parser.</param>
            <remarks>
            This method uses JsonPath.Net to evaluate the <paramref name="path"/>. For more information on JSONPath, see the
            specification at https://www.rfc-editor.org/rfc/rfc9535.html or the JsonPath.Net documentation at
            https://docs.json-everything.net/path/basics/.
            </remarks>
        </member>
        <member name="M:System.Text.Json.Nodes.JNode.Merge(System.Text.Json.Nodes.JsonNode,System.Text.Json.Nodes.JsonNode,System.Text.Json.Settings.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:System.Text.Json.Nodes.JsonNode"/> using <see cref="T:System.Text.Json.Settings.JsonMergeSettings"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.LoadAsync(System.IO.Stream)">
            <summary>
            Loads a JSON object from the provided stream.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.LoadAsync(System.IO.Stream,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Loads a JSON object from the provided stream.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.Load(System.Text.Json.Utf8JsonReader@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions})">
            <summary>
            Loads a JSON object from the provided reader.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.Parse(System.String)">
            <summary>
            Parses text representing a single JSON object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.TryParse(System.String,System.Text.Json.Nodes.JsonObject@)">
            <summary>
            Tries to parse text representing a single JSON object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses text representing a single JSON object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.TryParse(System.String,System.Text.Json.Nodes.JsonObject@,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Tries to parse text representing a single JSON object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.FromObject(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:System.Text.Json.Nodes.JsonObject"/> from an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.Clone(System.Text.Json.Nodes.JsonObject)">
            <summary>
            Creates a new instance from an existing <see cref="T:System.Text.Json.Nodes.JsonObject"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JObject.Merge(System.Text.Json.Nodes.JsonObject,System.Text.Json.Nodes.JsonNode,System.Text.Json.Settings.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:System.Text.Json.Nodes.JsonObject"/> using <see cref="T:System.Text.Json.Settings.JsonMergeSettings"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JValue.Parse(System.String)">
            <summary>
            Parses text representing a single JSON value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JValue.Parse(System.String,System.Nullable{System.Text.Json.Nodes.JsonNodeOptions},System.Text.Json.JsonDocumentOptions)">
            <summary>
            Parses text representing a single JSON value.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JValue.FromObject(System.Object,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Creates a <see cref="T:System.Text.Json.Nodes.JsonValue"/> from an object.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JValue.Clone(System.Text.Json.Nodes.JsonValue)">
            <summary>
            Creates a new instance from an existing <see cref="T:System.Text.Json.Nodes.JsonValue"/>.
            </summary>
        </member>
        <member name="M:System.Text.Json.Nodes.JValue.GetObjectValue(System.Text.Json.Nodes.JsonValue)">
            <summary>
            Gets the raw value of this <see cref="T:System.Text.Json.Nodes.JsonValue"/> without specifying a type.
            </summary>
        </member>
        <member name="M:System.Text.Json.Serialization.ServiceCollectionExtensions.AddJsonDerivedTypeInfo``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers a JSON type resolver allowing to serialize a given type from its base type.
            </summary>
        </member>
        <member name="T:System.Text.Json.Settings.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="M:System.Text.Json.Settings.JsonMergeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Text.Json.Settings.JsonMergeSettings"/> class.
            </summary>
        </member>
        <member name="P:System.Text.Json.Settings.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:System.Text.Json.Settings.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how null value properties are merged.
            </summary>
        </member>
        <member name="P:System.Text.Json.Settings.JsonMergeSettings.PropertyNameComparison">
            <summary>
            Gets or sets the comparison used to match property names while merging.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
        </member>
        <member name="T:System.Text.Json.Settings.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:System.Text.Json.Settings.MergeArrayHandling.Concat">
            <summary>
            Concatenate arrays.
            </summary>
        </member>
        <member name="F:System.Text.Json.Settings.MergeArrayHandling.Union">
            <summary>
            Union arrays, skipping items that already exist.
            </summary>
        </member>
        <member name="F:System.Text.Json.Settings.MergeArrayHandling.Replace">
            <summary>
            Replace all array items.
            </summary>
        </member>
        <member name="F:System.Text.Json.Settings.MergeArrayHandling.Merge">
            <summary>
            Merge array items together, matched by index.
            </summary>
        </member>
        <member name="T:System.Text.Json.Settings.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:System.Text.Json.Settings.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:System.Text.Json.Settings.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IServiceProvider},System.Int32)">
            <summary>
            This method gets called for each tenant. Use this method to add services to the container.
            For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940.
            </summary>
            <param name="configure">The action to execute when configuring the services for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection},System.Int32)">
            <summary>
            This method gets called for each tenant. Use this method to add services to the container.
            For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940.
            </summary>
            <param name="configure">The action to execute when configuring the services for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider},System.Int32)">
            <summary>
            This method gets called for each tenant. Use this method to configure the request's pipeline.
            </summary>
            <param name="configure">The action to execute when configuring the request's pipeline for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder},System.Int32)">
            <summary>
            This method gets called for each tenant. Use this method to configure the request's pipeline.
            </summary>
            <param name="configure">The action to execute when configuring the request's pipeline for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.Configure(System.Action{Microsoft.AspNetCore.Builder.IApplicationBuilder},System.Int32)">
            <summary>
            This method gets called for each tenant. Use this method to configure the request's pipeline.
            </summary>
            <param name="configure">The action to execute when configuring the request's pipeline for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.Configure(System.Func{Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.IServiceProvider,System.Threading.Tasks.ValueTask},System.Int32)">
            <summary>
            This async action gets called for each tenant. Use this method to configure the tenant pipeline.
            </summary>
            <param name="configureAsync">The async action to execute when configuring the request's pipeline for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.Configure(System.Func{Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Routing.IEndpointRouteBuilder,System.Threading.Tasks.ValueTask},System.Int32)">
            <summary>
            This async action gets called for each tenant. Use this method to configure the tenant pipeline.
            </summary>
            <param name="configureAsync">The async action to execute when configuring the request's pipeline for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.OrchardCoreBuilder.Configure(System.Func{Microsoft.AspNetCore.Builder.IApplicationBuilder,System.Threading.Tasks.ValueTask},System.Int32)">
            <summary>
            This async action gets called for each tenant. Use this method to configure the tenant pipeline.
            </summary>
            <param name="configureAsync">The async action to execute when configuring the request's pipeline for a tenant.</param>
            <param name="order">The order of the action to execute. Lower values will be executed first.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.Initialize(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,System.Threading.Tasks.ValueTask})">
            <summary>
            Registers a delegate to be invoked asynchronously just after a tenant container is created.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.Configure``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0,System.Threading.Tasks.ValueTask})">
            <summary>
            Registers a delegate used to configure asynchronously a type of options just after a tenant container is created.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.ServiceCollectionExtensions.Configure``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers an <see cref="T:Microsoft.Extensions.Options.IAsyncConfigureOptions`1"/> used to configure
            asynchronously a type of options just after a tenant container is created.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions">
            <summary>
            Extension methods for adding <see cref="T:Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions.AddTenantJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path"/> to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions.AddTenantJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path"/> to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <param name="optional">Whether the file is optional.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions.AddTenantJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds the JSON configuration provider at <paramref name="path"/> to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <param name="optional">Whether the file is optional.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions.AddTenantJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,Microsoft.Extensions.FileProviders.IFileProvider,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a JSON configuration source to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="provider">The <see cref="T:Microsoft.Extensions.FileProviders.IFileProvider"/> to use to access the file.</param>
            <param name="path">Path relative to the base path stored in
            <see cref="P:Microsoft.Extensions.Configuration.IConfigurationBuilder.Properties"/> of <paramref name="builder"/>.</param>
            <param name="optional">Whether the file is optional.</param>
            <param name="reloadOnChange">Whether the configuration should be reloaded if the file changes.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions.AddTenantJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.Action{Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationSource})">
            <summary>
            Adds a JSON configuration source to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="configureSource">Configures the source.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.TenantJsonConfigurationExtensions.AddTenantJsonStream(Microsoft.Extensions.Configuration.IConfigurationBuilder,System.IO.Stream)">
            <summary>
            Adds a JSON configuration source to <paramref name="builder"/>.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/> to add to.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read the json configuration data from.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationProvider">
            <summary>
            A JSON file based <see cref="T:Microsoft.Extensions.Configuration.FileConfigurationProvider"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationSource)">
            <summary>
            Initializes a new instance with the specified source.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads the JSON data from a stream.
            </summary>
            <param name="stream">The stream to read.</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationSource">
            <summary>
            Represents a JSON file as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationProvider"/> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</param>
            <returns>A <see cref="T:Microsoft.Extensions.Configuration.Json.TenantJsonConfigurationProvider"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationProvider">
            <summary>
            Loads configuration key/values from a json stream into a provider.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationProvider.#ctor(Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationSource)">
            <summary>
            Constructor.
            </summary>
            <param name="source">The <see cref="T:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationSource"/>.</param>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationProvider.Load(System.IO.Stream)">
            <summary>
            Loads json configuration key/values from a stream into a provider.
            </summary>
            <param name="stream">The json <see cref="T:System.IO.Stream"/> to load configuration data from.</param>
        </member>
        <member name="T:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationSource">
            <summary>
            Represents a JSON file as an <see cref="T:Microsoft.Extensions.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Builds the <see cref="T:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationProvider"/> for this source.
            </summary>
            <param name="builder">The <see cref="T:Microsoft.Extensions.Configuration.IConfigurationBuilder"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Configuration.Json.TenantJsonStreamConfigurationProvider"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.Options.IAsyncConfigureOptions`1">
            <summary>
            Used to configure asynchronously a type of options just after a tenant container is created.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.Options.IAsyncConfigureOptions`1.ConfigureAsync(`0)">
            <summary>
            Configures asynchronously an options instance.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.Options.IAsyncOptions">
            <summary>
            Marks a type of options intended to be registered as a singleton and configured asynchronously
            by an <see cref="T:Microsoft.Extensions.Options.IAsyncConfigureOptions`1"/> just after a tenant container is created.
            </summary>
        </member>
    </members>
</doc>
