<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OrchardCore.Users.Abstractions</name>
    </assembly>
    <members>
        <member name="T:OrchardCore.Users.ClaimsPrincipalExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.ClaimsPrincipalExtensions.GetSerializableClaims(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets a serialized version of the claims.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</param>
            <returns>A list of <see cref="T:OrchardCore.Users.SerializableClaim"/>.</returns>
        </member>
        <member name="T:OrchardCore.Users.Events.ILoginFormEvent">
            <summary>
            Contract for login events.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Events.ILoginFormEvent.LoggingInAsync(System.String,System.Action{System.String,System.String})">
            <summary>
            Occurs when the user is logging.
            </summary>
            <param name="userName">The username.</param>
            <param name="reportError">The reported error if failure happened during the login process.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.ILoginFormEvent.LoggingInFailedAsync(System.String)">
            <summary>
            Occurs when the user login has failed and the user was not found.
            </summary>
            <param name="userName">The username.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.ILoginFormEvent.LoggingInFailedAsync(OrchardCore.Users.IUser)">
            <summary>
            Occurs when the user login has failed and the user is known.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.ILoginFormEvent.IsLockedOutAsync(OrchardCore.Users.IUser)">
            <summary>
            Occurs when a user is locked out.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.ILoginFormEvent.LoggedInAsync(OrchardCore.Users.IUser)">
            <summary>
            Occurs when the user is logged in.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
        </member>
        <member name="T:OrchardCore.Users.Events.IPasswordRecoveryFormEvents">
            <summary>
            Contract for password recovery events.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Events.IPasswordRecoveryFormEvents.ResettingPasswordAsync(System.Action{System.String,System.String})">
            <summary>
            Occurs during the user password is being reset.
            </summary>
            <param name="reportError">The reported error if failure happened during the rest process.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.IPasswordRecoveryFormEvents.PasswordResetAsync(OrchardCore.Users.Events.PasswordRecoveryContext)">
            <summary>
            Occurs after the user password has been reset.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Events.IPasswordRecoveryFormEvents.RecoveringPasswordAsync(System.Action{System.String,System.String})">
            <summary>
            Occurs during the user password recovery.
            </summary>
            <param name="reportError">The reported error if failure happened during the recovery process.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.IPasswordRecoveryFormEvents.PasswordRecoveredAsync(OrchardCore.Users.Events.PasswordRecoveryContext)">
            <summary>
            Occurs after the user password has been recovered.
            </summary>
        </member>
        <member name="T:OrchardCore.Users.Events.IRegistrationFormEvents">
            <summary>
            Contract for user registration events.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Events.IRegistrationFormEvents.RegistrationValidationAsync(System.Action{System.String,System.String})">
            <summary>
            Occurs during the user registration.
            </summary>
            <param name="reportError">The reported error if failure happened in validation process.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.IRegistrationFormEvents.RegisteredAsync(OrchardCore.Users.IUser)">
            <summary>
            Occurs when user has been registered.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Events.ITwoFactorAuthenticationHandler.IsRequiredAsync(OrchardCore.Users.IUser)">
            <summary>
            Checks if the two-factor authentication should be required for the given user or not.
            </summary>
            <param name="user">An instance of the user to evaluate.</param>
            <returns>true if the two-factor authentication is required otherwise false.</returns>
        </member>
        <member name="M:OrchardCore.Users.Events.ITwoFactorAuthenticationHandlerCoordinator.IsRequiredAsync(OrchardCore.Users.IUser)">
            <summary>
            Checks if the two-factor authentication should be required or not.
            </summary>
            <param name="user">An instance of the user to evaluate.</param>
            <returns>true if any of the two-factor authentication providers require 2FA otherwise false.</returns>
        </member>
        <member name="T:OrchardCore.Users.Events.PasswordRecoveryContext">
            <summary>
            Context for password recovery events.
            </summary>
        </member>
        <member name="T:OrchardCore.Users.Handlers.IExternalLoginEventHandler">
            <summary>
            Contract for external login events, this occurs when a tenant is set up.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IExternalLoginEventHandler.GenerateUserName(System.String,System.Collections.Generic.IEnumerable{OrchardCore.Users.SerializableClaim})">
            <summary>
            Occurs when the username is generated.
            </summary>
            <param name="provider">The login provider.</param>
            <param name="claims">A <see cref="T:OrchardCore.Users.SerializableClaim"/>s.</param>
            <return>A username.</return>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IExternalLoginEventHandler.UpdateUserAsync(OrchardCore.Users.Handlers.UpdateUserContext)">
            <summary>
            Occurs when the user is updated.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UpdateUserContext"/>.</param>
        </member>
        <member name="T:OrchardCore.Users.Handlers.IUserEventHandler">
            <summary>
            Contract for user events.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.CreatingAsync(OrchardCore.Users.Handlers.UserCreateContext)">
            <summary>
            Occurs before a user is created.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserCreateContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.CreatedAsync(OrchardCore.Users.Handlers.UserCreateContext)">
            <summary>
            Occurs when a user is created.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserCreateContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.DeletingAsync(OrchardCore.Users.Handlers.UserDeleteContext)">
            <summary>
            Occurs before a user is deleted.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserDeleteContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.DeletedAsync(OrchardCore.Users.Handlers.UserDeleteContext)">
            <summary>
            Occurs when a user is deleted.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserDeleteContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.UpdatingAsync(OrchardCore.Users.Handlers.UserUpdateContext)">
            <summary>
            Occurs before a user is updated.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserUpdateContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.UpdatedAsync(OrchardCore.Users.Handlers.UserUpdateContext)">
            <summary>
            Occurs when a user is updated.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserUpdateContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.DisabledAsync(OrchardCore.Users.Handlers.UserContext)">
            <summary>
            Occurs when a user is disabled.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.EnabledAsync(OrchardCore.Users.Handlers.UserContext)">
            <summary>
            Occurs when a user is enabled.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserContext"/>.</param>
        </member>
        <member name="M:OrchardCore.Users.Handlers.IUserEventHandler.ConfirmedAsync(OrchardCore.Users.Handlers.UserConfirmContext)">
            <summary>
            Occurs when a user is confirmed.
            </summary>
            <param name="context">The <see cref="T:OrchardCore.Users.Handlers.UserContext"/>.</param>
        </member>
        <member name="T:OrchardCore.Users.Handlers.UpdateUserContext">
            <summary>
            Represents a <see cref="T:OrchardCore.Users.Handlers.UserContextBase"/> for updated user roles.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UpdateUserContext.#ctor(OrchardCore.Users.IUser,System.String,System.Collections.Generic.IEnumerable{OrchardCore.Users.SerializableClaim},System.Text.Json.Nodes.JsonObject)">
            <summary>
            Creates a new instance of <see cref="T:OrchardCore.Users.Handlers.UpdateUserContext"/>.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
            <param name="loginProvider">The login provider.</param>
            <param name="externalClaims">The user claims.</param>
            <param name="userProperties">The user properties.</param>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.LoginProvider">
            <summary>
            Gets the login provider.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.ExternalClaims">
            <summary>
            Gets a list of external claims.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.UserProperties">
            <summary>
            Gets the user properties.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.UserRoles">
            <summary>
            Gets the user's roles.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.UserClaims">
            <summary>
            Gets the user's roles.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.RolesToAdd">
            <summary>
            Gets the roles to be added to the user roles.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.RolesToRemove">
            <summary>
            Gets the roles to be removed from the user roles.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.ClaimsToUpdate">
            <summary>
            Gets the claims to be added from the user claims.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.ClaimsToRemove">
            <summary>
            Gets the claims to be removed from the user claims.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UpdateUserContext.PropertiesToUpdate">
            <summary>
            Gets the user properties to update the user
            </summary>
        </member>
        <member name="T:OrchardCore.Users.Handlers.UserConfirmContext">
            <summary>
            Represents a context for confirming a user.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserConfirmContext.#ctor(OrchardCore.Users.IUser)">
            <inheritdocs />
        </member>
        <member name="T:OrchardCore.Users.Handlers.UserContext">
            <summary>
            Represents a context for a user.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserContext.#ctor(OrchardCore.Users.IUser)">
            <inheritdocs />
        </member>
        <member name="T:OrchardCore.Users.Handlers.UserContextBase">
            <summary>
            Represents a base context for a user.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserContextBase.#ctor(OrchardCore.Users.IUser)">
            <summary>
            Creates a new instance of <see cref="T:OrchardCore.Users.Handlers.UserContextBase"/>.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
        </member>
        <member name="P:OrchardCore.Users.Handlers.UserContextBase.User">
            <summary>
            Gets the user.
            </summary>
        </member>
        <member name="T:OrchardCore.Users.Handlers.UserCreateContext">
            <summary>
            Represents a context for a user creation.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserCreateContext.#ctor(OrchardCore.Users.IUser)">
            <inheritdocs />
        </member>
        <member name="T:OrchardCore.Users.Handlers.UserDeleteContext">
            <summary>
            Represents a context for deleting a user.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserDeleteContext.#ctor(OrchardCore.Users.IUser)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.CreatingAsync(OrchardCore.Users.Handlers.UserCreateContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.CreatedAsync(OrchardCore.Users.Handlers.UserCreateContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.DeletingAsync(OrchardCore.Users.Handlers.UserDeleteContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.DeletedAsync(OrchardCore.Users.Handlers.UserDeleteContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.UpdatingAsync(OrchardCore.Users.Handlers.UserUpdateContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.UpdatedAsync(OrchardCore.Users.Handlers.UserUpdateContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.DisabledAsync(OrchardCore.Users.Handlers.UserContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.EnabledAsync(OrchardCore.Users.Handlers.UserContext)">
            <inheritdocs />
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserEventHandlerBase.ConfirmedAsync(OrchardCore.Users.Handlers.UserConfirmContext)">
            <inheritdocs />
        </member>
        <member name="T:OrchardCore.Users.Handlers.UserUpdateContext">
            <summary>
            Represents a context for updating a user.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Handlers.UserUpdateContext.#ctor(OrchardCore.Users.IUser)">
            <inheritdocs />
        </member>
        <member name="T:OrchardCore.Users.IUser">
            <summary>
            Contract for ASP.NET Core Identity services.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.IUser.UserName">
            <summary>
            Gets the user name.
            </summary>
        </member>
        <member name="T:OrchardCore.Users.Models.UserClaim">
            <summary>
            Represents a claim that is granted to a specific user.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Models.UserClaim.ClaimType">
            <summary>
            Gets or sets the claim type for this claim.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.Models.UserClaim.ClaimValue">
            <summary>
            Gets or sets the claim value for this claim.
            </summary>
        </member>
        <member name="T:OrchardCore.Users.SerializableClaim">
            <summary>
            Represents a serialized version for the claim.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.Subject">
            <summary>
            Gets or sets the claim subject.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.Issuer">
            <summary>
            Gets or sets the claim issuer.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.OriginalIssuer">
            <summary>
            Gets or sets the claim original issuer for the claim.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.Properties">
            <summary>
            Gets or sets the claim properties.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.Type">
            <summary>
            Gets or sets the claim type.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.Value">
            <summary>
            Gets or sets the claim value.
            </summary>
        </member>
        <member name="P:OrchardCore.Users.SerializableClaim.ValueType">
            <summary>
            Gets or sets the type of the claim value.
            </summary>
        </member>
        <member name="T:OrchardCore.Users.Services.IMembershipService">
            <summary>
            Contract for membership services.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Services.IMembershipService.GetUserAsync(System.String)">
            <summary>
            Get the user with the specified username.
            </summary>
            <param name="userName">The username for the retrieved user.</param>
            <returns>The <see cref="T:OrchardCore.Users.IUser"/>.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IMembershipService.CheckPasswordAsync(System.String,System.String)">
            <summary>
            Checks the user password.
            </summary>
            <param name="userName">The username.</param>
            <param name="password">The user password.</param>
            <returns>Returns<c>true</c> if the password is correct, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IMembershipService.CreateClaimsPrincipal(OrchardCore.Users.IUser)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for the specified user.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
            <returns>A user <see cref="T:System.Security.Claims.ClaimsPrincipal"/>s.</returns>
        </member>
        <member name="T:OrchardCore.Users.Services.IUserService">
            <summary>
            Contract that provides an abstraction for common user operations.
            </summary>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.AuthenticateAsync(System.String,System.String,System.Action{System.String,System.String})">
            <summary>
            Authenticates the user credentials.
            </summary>
            <param name="usernameOrEmail">The username or email address.</param>
            <param name="password">The user password.</param>
            <param name="reportError">The error reported in case failure happened during the authentication process.</param>
            <returns>A <see cref="T:OrchardCore.Users.IUser"/> that represents an authenticated user.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.CreateUserAsync(OrchardCore.Users.IUser,System.String,System.Action{System.String,System.String})">
            <summary>
            Creates a user.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
            <param name="password">The user password.</param>
            <param name="reportError">The error reported in case failure happened during the creation process.</param>
            <returns>A <see cref="T:OrchardCore.Users.IUser"/> represents a created user.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.ChangeEmailAsync(OrchardCore.Users.IUser,System.String,System.Action{System.String,System.String})">
            <summary>
            Change a user email.
            </summary>
            <param name="user">The user.</param>
            <param name="newEmail">The new email.</param>
            <param name="reportError">The error reported in case failure happened during the creation process.</param>
            <returns>Returns <c>true</c> if the email has been changed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.ChangePasswordAsync(OrchardCore.Users.IUser,System.String,System.String,System.Action{System.String,System.String})">
            <summary>
            Change a user password.
            </summary>
            <param name="user">The user.</param>
            <param name="currentPassword">The current password.</param>
            <param name="newPassword">The new password.</param>
            <param name="reportError"></param>
            <returns>Returns <c>true</c> if the password has been changed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.GetAuthenticatedUserAsync(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Gets the authenticated user from a given <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.
            </summary>
            <param name="principal">The <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</param>
            <returns>A <see cref="T:OrchardCore.Users.IUser"/> represents the authenticated user.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.GetUserAsync(System.String)">
            <summary>
            Gets the user with a specified username or email address.
            </summary>
            <param name="usernameOrEmail">The username or email address.</param>
            <returns>The <see cref="T:OrchardCore.Users.IUser"/> represents the retrieved user.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.GetUserByUniqueIdAsync(System.String)">
            <summary>
            Gets the user with a specified ID.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>A <see cref="T:OrchardCore.Users.IUser"/> represents a retrieved user.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.GetForgotPasswordUserAsync(System.String)">
            <summary>
            Get a forgotten password for a specified user ID.
            </summary>
            <param name="userId">The user ID.</param>
            <returns>A <see cref="T:OrchardCore.Users.IUser"/> represents a user with forgotten password.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.ResetPasswordAsync(System.String,System.String,System.String,System.Action{System.String,System.String})">
            <summary>
            Resets the user password.
            </summary>
            <param name="usernameOrEmail">The username or email address.</param>
            <param name="resetToken">The token used to reset the password.</param>
            <param name="newPassword">The new password.</param>
            <param name="reportError">The error reported in case failure happened during the reset process.</param>
            <returns>Returns <c>true</c> if the password reset, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:OrchardCore.Users.Services.IUserService.CreatePrincipalAsync(OrchardCore.Users.IUser)">
            <summary>
            Creates a <see cref="T:System.Security.Claims.ClaimsPrincipal"/> for a given user.
            </summary>
            <param name="user">The <see cref="T:OrchardCore.Users.IUser"/>.</param>
            <returns>The <see cref="T:System.Security.Claims.ClaimsPrincipal"/>.</returns>
        </member>
    </members>
</doc>
